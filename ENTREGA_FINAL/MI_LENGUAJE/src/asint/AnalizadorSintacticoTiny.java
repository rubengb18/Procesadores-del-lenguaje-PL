
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 15 00:40:16 CEST 2022
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 15 00:40:16 CEST 2022
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\002\003\000\002\002\004\000\002\012" +
    "\005\000\002\013\004\000\002\013\005\000\002\013\004" +
    "\000\002\013\003\000\002\013\005\000\002\013\006\000" +
    "\002\013\005\000\002\013\004\000\002\054\005\000\002" +
    "\054\004\000\002\040\006\000\002\041\005\000\002\055" +
    "\005\000\002\056\005\000\002\071\005\000\002\050\004" +
    "\000\002\050\004\000\002\050\003\000\002\050\003\000" +
    "\002\051\004\000\002\051\003\000\002\053\004\000\002" +
    "\053\003\000\002\011\004\000\002\011\003\000\002\070" +
    "\004\000\002\070\003\000\002\014\003\000\002\014\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\073\004\000\002\073\004\000\002\073\007\000\002" +
    "\073\007\000\002\073\005\000\002\073\005\000\002\064" +
    "\004\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\015" +
    "\005\000\002\074\005\000\002\063\010\000\002\016\006" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\020\007\000\002\075\007\000\002\044\003\000\002" +
    "\044\003\000\002\044\005\000\002\022\005\000\002\022" +
    "\007\000\002\021\005\000\002\066\012\000\002\066\005" +
    "\000\002\067\007\000\002\067\005\000\002\045\005\000" +
    "\002\046\005\000\002\003\005\000\002\003\003\000\002" +
    "\004\005\000\002\004\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\005\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\023\003\000\002\023\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\005\000\002\027\003\000" +
    "\002\030\005\000\002\030\003\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\004\000\002\032\003" +
    "\000\002\031\005\000\002\031\003\000\002\043\004\000" +
    "\002\062\006\000\002\062\005\000\002\062\006\000\002" +
    "\062\005\000\002\062\003\000\002\033\004\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\004" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\003\000\002\034\005\000\002\034\003\000\002" +
    "\035\005\000\002\035\004\000\002\035\005\000\002\036" +
    "\007\000\002\036\007\000\002\036\007\000\002\036\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\037\005\000\002\057\006\000\002" +
    "\057\005\000\002\072\004\000\002\060\005\000\002\060" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\047\005\000\002\047\004\000" +
    "\002\052\006\000\002\052\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\004\030\006\001\002\000\004\002\001\001" +
    "\002\000\004\002\u0117\001\002\000\004\030\014\001\002" +
    "\000\004\027\u0116\001\002\000\004\027\ufffb\001\002\000" +
    "\004\030\u010f\001\002\000\004\030\244\001\002\000\004" +
    "\030\u010c\001\002\000\040\003\047\004\053\010\023\024" +
    "\045\025\054\027\050\031\037\034\056\035\033\041\060" +
    "\044\064\045\052\047\062\050\044\052\035\001\002\000" +
    "\032\004\uffcf\010\uffcf\024\uffcf\025\uffcf\027\uffcf\031\uffcf" +
    "\034\uffcf\035\uffcf\043\uffcf\044\uffcf\045\uffcf\052\uffcf\001" +
    "\002\000\032\004\uffd5\010\uffd5\024\uffd5\025\uffd5\027\uffd5" +
    "\031\uffd5\034\uffd5\035\uffd5\043\uffd5\044\uffd5\045\uffd5\052" +
    "\uffd5\001\002\000\032\004\uffd6\010\uffd6\024\uffd6\025\uffd6" +
    "\027\uffd6\031\uffd6\034\uffd6\035\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\052\uffd6\001\002\000\042\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\015\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\026\uffc1\030\uffc1\036\uffc1\037\uffc1" +
    "\001\002\000\032\004\uffd7\010\uffd7\024\uffd7\025\uffd7\027" +
    "\uffd7\031\uffd7\034\uffd7\035\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\052\uffd7\001\002\000\004\027\u0108\001\002\000\010\004" +
    "\077\031\037\034\056\001\002\000\032\004\uffd1\010\uffd1" +
    "\024\uffd1\025\uffd1\027\uffd1\031\uffd1\034\uffd1\035\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\052\uffd1\001\002\000\032\004\uffd2" +
    "\010\uffd2\024\uffd2\025\uffd2\027\uffd2\031\uffd2\034\uffd2\035" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\052\uffd2\001\002\000\032" +
    "\004\uffd4\010\uffd4\024\uffd4\025\uffd4\027\uffd4\031\uffd4\034" +
    "\uffd4\035\uffd4\043\uffd4\044\uffd4\045\uffd4\052\uffd4\001\002" +
    "\000\006\027\uffea\047\062\001\002\000\010\003\047\027" +
    "\uffe4\041\060\001\002\000\032\004\053\010\023\024\045" +
    "\025\054\027\uffe6\031\037\034\056\035\033\043\uffe6\044" +
    "\064\045\052\052\035\001\002\000\032\004\uffcd\010\uffcd" +
    "\024\uffcd\025\uffcd\027\uffcd\031\uffcd\034\uffcd\035\uffcd\043" +
    "\uffcd\044\uffcd\045\uffcd\052\uffcd\001\002\000\016\003\373" +
    "\004\077\014\374\031\037\034\056\035\033\001\002\000" +
    "\032\004\uffce\010\uffce\024\uffce\025\uffce\027\uffce\031\uffce" +
    "\034\uffce\035\uffce\043\uffce\044\uffce\045\uffce\052\uffce\001" +
    "\002\000\004\014\352\001\002\000\004\004\346\001\002" +
    "\000\012\003\uffe0\004\uffe0\026\uffe0\046\uffe0\001\002\000" +
    "\006\027\uffe8\050\044\001\002\000\004\027\344\001\002" +
    "\000\004\004\340\001\002\000\004\026\337\001\002\000" +
    "\014\004\077\010\023\031\037\034\056\035\033\001\002" +
    "\000\014\004\144\005\247\014\250\032\143\033\147\001" +
    "\002\000\004\027\324\001\002\000\010\003\uff7a\027\uff7a" +
    "\041\uff7a\001\002\000\040\003\ufff5\004\ufff5\010\ufff5\024" +
    "\ufff5\025\ufff5\027\ufff5\031\ufff5\034\ufff5\035\ufff5\040\ufff5" +
    "\041\ufff5\043\ufff5\044\ufff5\045\ufff5\052\ufff5\001\002\000" +
    "\004\012\315\001\002\000\004\004\313\001\002\000\016" +
    "\003\151\004\uffdf\012\uffc2\014\300\016\153\053\150\001" +
    "\002\000\014\004\144\005\247\014\250\032\143\033\147" +
    "\001\002\000\032\004\uffd3\010\uffd3\024\uffd3\025\uffd3\027" +
    "\uffd3\031\uffd3\034\uffd3\035\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\052\uffd3\001\002\000\012\003\uffe1\004\uffe1\026\uffe1\046" +
    "\uffe1\001\002\000\032\004\uffd0\010\uffd0\024\uffd0\025\uffd0" +
    "\027\uffd0\031\uffd0\034\uffd0\035\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\052\uffd0\001\002\000\016\004\077\010\023\031\037" +
    "\034\056\035\033\042\121\001\002\000\004\004\112\001" +
    "\002\000\006\003\071\004\072\001\002\000\004\027\070" +
    "\001\002\000\004\004\066\001\002\000\032\004\uffcc\010" +
    "\uffcc\024\uffcc\025\uffcc\027\uffcc\031\uffcc\034\uffcc\035\uffcc" +
    "\043\uffcc\044\uffcc\045\uffcc\052\uffcc\001\002\000\004\026" +
    "\067\001\002\000\032\004\uffb7\010\uffb7\024\uffb7\025\uffb7" +
    "\027\uffb7\031\uffb7\034\uffb7\035\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\052\uffb7\001\002\000\004\030\ufff1\001\002\000\006" +
    "\027\uff6a\047\uff6a\001\002\000\004\030\074\001\002\000" +
    "\006\027\uff6b\047\uff6b\001\002\000\012\004\077\031\037" +
    "\034\056\035\033\001\002\000\014\004\077\027\uffed\031" +
    "\037\034\056\035\033\001\002\000\014\004\077\027\uffec" +
    "\031\037\034\056\035\033\001\002\000\012\003\uffdf\004" +
    "\uffdf\026\uffdf\046\uffdf\001\002\000\004\027\107\001\002" +
    "\000\004\004\105\001\002\000\004\004\103\001\002\000" +
    "\004\026\104\001\002\000\032\004\uffca\010\uffca\024\uffca" +
    "\025\uffca\027\uffca\031\uffca\034\uffca\035\uffca\043\uffca\044" +
    "\uffca\045\uffca\052\uffca\001\002\000\004\026\106\001\002" +
    "\000\032\004\uffcb\010\uffcb\024\uffcb\025\uffcb\027\uffcb\031" +
    "\uffcb\034\uffcb\035\uffcb\043\uffcb\044\uffcb\045\uffcb\052\uffcb" +
    "\001\002\000\006\027\ufff3\047\ufff3\001\002\000\004\027" +
    "\uffee\001\002\000\004\027\uffef\001\002\000\004\012\113" +
    "\001\002\000\004\051\114\001\002\000\012\004\077\010" +
    "\023\031\037\034\056\001\002\000\012\003\uffe2\004\uffe2" +
    "\026\uffe2\046\uffe2\001\002\000\012\003\uffe3\004\uffe3\026" +
    "\uffe3\046\uffe3\001\002\000\004\026\120\001\002\000\032" +
    "\004\uffc9\010\uffc9\024\uffc9\025\uffc9\027\uffc9\031\uffc9\034" +
    "\uffc9\035\uffc9\043\uffc9\044\uffc9\045\uffc9\052\uffc9\001\002" +
    "\000\004\004\241\001\002\000\004\004\236\001\002\000" +
    "\004\004\124\001\002\000\006\003\125\014\126\001\002" +
    "\000\016\003\207\004\077\010\023\031\037\034\056\035" +
    "\033\001\002\000\020\003\207\004\077\010\023\015\211" +
    "\031\037\034\056\035\033\001\002\000\004\030\131\001" +
    "\002\000\010\003\uff7b\027\uff7b\041\uff7b\001\002\000\026" +
    "\004\053\010\023\024\045\025\054\031\037\034\056\035" +
    "\033\044\064\045\052\052\035\001\002\000\004\043\133" +
    "\001\002\000\016\003\146\004\144\005\141\016\142\032" +
    "\143\033\147\001\002\000\004\027\135\001\002\000\010" +
    "\003\ufff4\027\ufff4\041\ufff4\001\002\000\004\026\206\001" +
    "\002\000\004\026\uff79\001\002\000\004\026\uff78\001\002" +
    "\000\004\026\uff77\001\002\000\016\003\146\005\166\016" +
    "\142\017\171\032\143\033\147\001\002\000\042\003\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\011\uffa1\013\uffa1\015\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\026\uffa1\030\uffa1" +
    "\036\uffa1\037\uffa1\001\002\000\050\003\151\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016\153" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\026\uffc2\030" +
    "\uffc2\036\uffc2\037\uffc2\053\150\001\002\000\004\026\uff76" +
    "\001\002\000\014\003\uff94\013\uff94\015\uff94\017\uff94\026" +
    "\uff94\001\002\000\042\003\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\013\uffa0\015\uffa0\017\uffa0\020\uffa0\021\uffa0\022" +
    "\uffa0\023\uffa0\026\uffa0\030\uffa0\036\uffa0\037\uffa0\001\002" +
    "\000\004\004\144\001\002\000\042\006\uff8c\007\uff8c\010" +
    "\uff8c\011\uff8c\012\uff8c\013\uff8c\015\uff8c\017\uff8c\020\uff8c" +
    "\021\uff8c\022\uff8c\023\uff8c\026\uff8c\030\uff8c\036\uff8c\037" +
    "\uff8c\001\002\000\042\006\uff91\007\uff91\010\uff91\011\uff91" +
    "\012\uff91\013\uff91\015\uff91\017\uff91\020\uff91\021\uff91\022" +
    "\uff91\023\uff91\026\uff91\030\uff91\036\uff91\037\uff91\001\002" +
    "\000\006\004\144\005\154\001\002\000\004\017\160\001" +
    "\002\000\004\017\156\001\002\000\046\003\151\006\uff8d" +
    "\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\015\uff8d\016" +
    "\153\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\026\uff8d" +
    "\030\uff8d\036\uff8d\037\uff8d\001\002\000\042\006\uff8e\007" +
    "\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\015\uff8e\017\uff8e" +
    "\020\uff8e\021\uff8e\022\uff8e\023\uff8e\026\uff8e\030\uff8e\036" +
    "\uff8e\037\uff8e\001\002\000\046\003\151\006\uff8f\007\uff8f" +
    "\010\uff8f\011\uff8f\012\uff8f\013\uff8f\015\uff8f\016\153\017" +
    "\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\026\uff8f\030\uff8f" +
    "\036\uff8f\037\uff8f\001\002\000\042\006\uff90\007\uff90\010" +
    "\uff90\011\uff90\012\uff90\013\uff90\015\uff90\017\uff90\020\uff90" +
    "\021\uff90\022\uff90\023\uff90\026\uff90\030\uff90\036\uff90\037" +
    "\uff90\001\002\000\042\006\uffc0\007\uffc0\010\uffc0\011\uffc0" +
    "\012\uffc0\013\uffc0\015\uffc0\017\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\023\uffc0\026\uffc0\030\uffc0\036\uffc0\037\uffc0\001\002" +
    "\000\006\003\204\017\205\001\002\000\010\003\uff9c\013" +
    "\202\017\uff9c\001\002\000\006\003\200\017\201\001\002" +
    "\000\010\003\uff9e\013\176\017\uff9e\001\002\000\012\003" +
    "\uff92\013\174\017\uff92\026\uff92\001\002\000\006\003\172" +
    "\017\173\001\002\000\014\003\uff95\013\uff95\015\uff95\017" +
    "\uff95\026\uff95\001\002\000\014\003\uff98\013\uff98\015\uff98" +
    "\017\uff98\026\uff98\001\002\000\014\003\uff99\013\uff99\015" +
    "\uff99\017\uff99\026\uff99\001\002\000\006\003\146\016\142" +
    "\001\002\000\010\003\uff93\017\uff93\026\uff93\001\002\000" +
    "\004\005\166\001\002\000\006\003\uff9f\017\uff9f\001\002" +
    "\000\014\003\uff96\013\uff96\015\uff96\017\uff96\026\uff96\001" +
    "\002\000\014\003\uff97\013\uff97\015\uff97\017\uff97\026\uff97" +
    "\001\002\000\006\032\143\033\147\001\002\000\006\003" +
    "\uff9d\017\uff9d\001\002\000\014\003\uff9a\013\uff9a\015\uff9a" +
    "\017\uff9a\026\uff9a\001\002\000\014\003\uff9b\013\uff9b\015" +
    "\uff9b\017\uff9b\026\uff9b\001\002\000\004\027\uff75\001\002" +
    "\000\010\003\uff83\013\uff83\015\uff83\001\002\000\010\003" +
    "\227\004\230\046\226\001\002\000\004\030\uff7f\001\002" +
    "\000\004\015\225\001\002\000\010\003\uff81\013\223\015" +
    "\uff81\001\002\000\010\003\216\004\217\046\215\001\002" +
    "\000\006\003\221\004\222\001\002\000\004\004\220\001" +
    "\002\000\010\003\uff87\013\uff87\015\uff87\001\002\000\010" +
    "\003\uff86\013\uff86\015\uff86\001\002\000\010\003\uff84\013" +
    "\uff84\015\uff84\001\002\000\010\003\uff85\013\uff85\015\uff85" +
    "\001\002\000\016\003\207\004\077\010\023\031\037\034" +
    "\056\035\033\001\002\000\006\003\uff82\015\uff82\001\002" +
    "\000\004\030\uff80\001\002\000\006\003\232\004\233\001" +
    "\002\000\004\004\231\001\002\000\010\003\uff8b\013\uff8b" +
    "\015\uff8b\001\002\000\010\003\uff8a\013\uff8a\015\uff8a\001" +
    "\002\000\010\003\uff88\013\uff88\015\uff88\001\002\000\010" +
    "\003\uff89\013\uff89\015\uff89\001\002\000\004\003\235\001" +
    "\002\000\004\030\uff7e\001\002\000\006\003\125\014\126" +
    "\001\002\000\004\030\131\001\002\000\010\003\uff7c\027" +
    "\uff7c\041\uff7c\001\002\000\006\003\125\014\126\001\002" +
    "\000\004\030\244\001\002\000\010\003\uff7d\027\uff7d\041" +
    "\uff7d\001\002\000\030\004\053\010\023\024\045\025\054" +
    "\027\050\031\037\034\056\035\033\044\064\045\052\052" +
    "\035\001\002\000\034\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\015\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\026\uffb0\030" +
    "\uffb0\036\uffb0\037\uffb0\001\002\000\034\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\015\uffb1\020\uffb1\021\uffb1\022\uffb1\023" +
    "\uffb1\026\uffb1\030\uffb1\036\uffb1\037\uffb1\001\002\000\034" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\015\uffb2\020\uffb2\021" +
    "\uffb2\022\uffb2\023\uffb2\026\uffb2\030\uffb2\036\uffb2\037\uffb2" +
    "\001\002\000\014\004\144\005\247\014\250\032\143\033" +
    "\147\001\002\000\034\006\uffb3\007\uffb3\010\uffb3\011\uffb3" +
    "\015\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\026\uffb3\030" +
    "\uffb3\036\uffb3\037\uffb3\001\002\000\034\006\uffb5\007\uffb5" +
    "\010\266\011\271\015\uffb5\020\270\021\264\022\272\023" +
    "\267\026\uffb5\030\uffb5\036\uffb5\037\uffb5\001\002\000\014" +
    "\006\254\007\260\030\244\036\256\037\262\001\002\000" +
    "\014\004\uffae\005\uffae\014\uffae\032\uffae\033\uffae\001\002" +
    "\000\014\004\uffac\005\uffac\014\uffac\032\uffac\033\uffac\001" +
    "\002\000\014\004\uffa3\005\uffa3\014\uffa3\032\uffa3\033\uffa3" +
    "\001\002\000\014\004\144\005\247\014\250\032\143\033" +
    "\147\001\002\000\014\004\uffad\005\uffad\014\uffad\032\uffad" +
    "\033\uffad\001\002\000\032\004\uffbd\010\uffbd\024\uffbd\025" +
    "\uffbd\027\uffbd\031\uffbd\034\uffbd\035\uffbd\043\uffbd\044\uffbd" +
    "\045\uffbd\052\uffbd\001\002\000\014\004\uffa2\005\uffa2\014" +
    "\uffa2\032\uffa2\033\uffa2\001\002\000\034\006\uffb6\007\uffb6" +
    "\010\266\011\271\015\uffb6\020\270\021\264\022\272\023" +
    "\267\026\uffb6\030\uffb6\036\uffb6\037\uffb6\001\002\000\014" +
    "\004\uffa6\005\uffa6\014\uffa6\032\uffa6\033\uffa6\001\002\000" +
    "\014\004\144\005\247\014\250\032\143\033\147\001\002" +
    "\000\014\004\uffab\005\uffab\014\uffab\032\uffab\033\uffab\001" +
    "\002\000\014\004\uffa4\005\uffa4\014\uffa4\032\uffa4\033\uffa4" +
    "\001\002\000\014\004\uffa7\005\uffa7\014\uffa7\032\uffa7\033" +
    "\uffa7\001\002\000\014\004\uffaa\005\uffaa\014\uffaa\032\uffaa" +
    "\033\uffaa\001\002\000\014\004\uffa5\005\uffa5\014\uffa5\032" +
    "\uffa5\033\uffa5\001\002\000\014\004\uffa9\005\uffa9\014\uffa9" +
    "\032\uffa9\033\uffa9\001\002\000\014\004\uffa8\005\uffa8\014" +
    "\uffa8\032\uffa8\033\uffa8\001\002\000\034\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\015\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\026\uffb4\030\uffb4\036\uffb4\037\uffb4\001\002\000\014" +
    "\006\254\007\260\015\277\036\256\037\262\001\002\000" +
    "\034\006\uffaf\007\uffaf\010\uffaf\011\uffaf\015\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\026\uffaf\030\uffaf\036\uffaf\037" +
    "\uffaf\001\002\000\020\003\146\004\144\005\303\015\307" +
    "\016\142\032\143\033\147\001\002\000\006\013\uff6d\015" +
    "\uff6d\001\002\000\006\013\uff6f\015\uff6f\001\002\000\006" +
    "\013\uff6e\015\uff6e\001\002\000\006\013\311\015\uff70\001" +
    "\002\000\006\013\uff6c\015\uff6c\001\002\000\004\015\310" +
    "\001\002\000\004\026\uff73\001\002\000\004\026\uff74\001" +
    "\002\000\016\003\146\004\144\005\303\016\142\032\143" +
    "\033\147\001\002\000\004\015\uff71\001\002\000\004\026" +
    "\314\001\002\000\032\004\uffb8\010\uffb8\024\uffb8\025\uffb8" +
    "\027\uffb8\031\uffb8\034\uffb8\035\uffb8\043\uffb8\044\uffb8\045" +
    "\uffb8\052\uffb8\001\002\000\020\003\146\004\320\005\247" +
    "\014\250\016\142\032\143\033\147\001\002\000\004\026" +
    "\uffc6\001\002\000\004\026\uffc5\001\002\000\040\003\151" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\014\300\016\153\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\026\uffc2\036\uffc2\037\uffc2" +
    "\053\150\001\002\000\004\026\323\001\002\000\014\006" +
    "\254\007\260\026\uffc7\036\256\037\262\001\002\000\032" +
    "\004\uffc8\010\uffc8\024\uffc8\025\uffc8\027\uffc8\031\uffc8\034" +
    "\uffc8\035\uffc8\043\uffc8\044\uffc8\045\uffc8\052\uffc8\001\002" +
    "\000\004\030\ufff2\001\002\000\014\006\254\007\260\030" +
    "\244\036\256\037\262\001\002\000\034\004\uffbf\010\uffbf" +
    "\024\uffbf\025\uffbf\027\uffbf\031\uffbf\034\uffbf\035\uffbf\040" +
    "\327\043\uffbf\044\uffbf\045\uffbf\052\uffbf\001\002\000\004" +
    "\030\244\001\002\000\032\004\uffbe\010\uffbe\024\uffbe\025" +
    "\uffbe\027\uffbe\031\uffbe\034\uffbe\035\uffbe\043\uffbe\044\uffbe" +
    "\045\uffbe\052\uffbe\001\002\000\004\004\335\001\002\000" +
    "\004\004\333\001\002\000\004\026\334\001\002\000\006" +
    "\027\uff68\050\uff68\001\002\000\004\026\336\001\002\000" +
    "\006\027\uff69\050\uff69\001\002\000\032\004\uff72\010\uff72" +
    "\024\uff72\025\uff72\027\uff72\031\uff72\034\uff72\035\uff72\043" +
    "\uff72\044\uff72\045\uff72\052\uff72\001\002\000\006\012\341" +
    "\026\106\001\002\000\020\003\146\004\320\005\247\014" +
    "\250\016\142\032\143\033\147\001\002\000\004\026\343" +
    "\001\002\000\042\004\uffc4\005\uffc4\010\uffc4\014\uffc4\024" +
    "\uffc4\025\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\043\uffc4\044\uffc4\045\uffc4\052\uffc4\001\002\000" +
    "\004\030\ufff0\001\002\000\004\027\uffe9\001\002\000\006" +
    "\012\347\026\104\001\002\000\020\003\146\004\320\005" +
    "\247\014\250\016\142\032\143\033\147\001\002\000\004" +
    "\026\351\001\002\000\032\004\uffc3\010\uffc3\024\uffc3\025" +
    "\uffc3\027\uffc3\031\uffc3\034\uffc3\035\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\052\uffc3\001\002\000\012\003\355\004\077\031" +
    "\037\034\056\001\002\000\004\004\371\001\002\000\014" +
    "\004\144\005\247\014\250\032\143\033\147\001\002\000" +
    "\032\004\uffbb\010\uffbb\024\uffbb\025\uffbb\027\uffbb\031\uffbb" +
    "\034\uffbb\035\uffbb\043\uffbb\044\uffbb\045\uffbb\052\uffbb\001" +
    "\002\000\014\006\254\007\260\026\357\036\256\037\262" +
    "\001\002\000\004\004\361\001\002\000\004\015\367\001" +
    "\002\000\004\012\362\001\002\000\006\003\363\004\364" +
    "\001\002\000\004\015\uffb9\001\002\000\012\006\254\007" +
    "\260\036\256\037\262\001\002\000\004\005\366\001\002" +
    "\000\004\015\uffba\001\002\000\004\030\244\001\002\000" +
    "\032\004\uffbc\010\uffbc\024\uffbc\025\uffbc\027\uffbc\031\uffbc" +
    "\034\uffbc\035\uffbc\043\uffbc\044\uffbc\045\uffbc\052\uffbc\001" +
    "\002\000\004\012\341\001\002\000\010\003\uffde\004\uffde" +
    "\046\uffde\001\002\000\006\004\u0103\035\033\001\002\000" +
    "\004\005\376\001\002\000\010\003\uffdd\004\uffdd\046\uffdd" +
    "\001\002\000\004\015\377\001\002\000\012\004\077\031" +
    "\037\034\056\035\033\001\002\000\010\003\uffdc\004\uffdc" +
    "\046\uffdc\001\002\000\010\003\uffdb\004\uffdb\046\uffdb\001" +
    "\002\000\010\003\uffd9\004\uffd9\046\uffd9\001\002\000\010" +
    "\003\uffda\004\uffda\046\uffda\001\002\000\006\027\uffe7\043" +
    "\uffe7\001\002\000\004\027\uffe5\001\002\000\004\027\uffeb" +
    "\001\002\000\012\003\uffd8\004\uffd8\026\uffd8\046\uffd8\001" +
    "\002\000\040\003\ufff6\004\ufff6\010\ufff6\024\ufff6\025\ufff6" +
    "\027\ufff6\031\ufff6\034\ufff6\035\ufff6\040\ufff6\041\ufff6\043" +
    "\ufff6\044\ufff6\045\ufff6\052\ufff6\001\002\000\004\030\244" +
    "\001\002\000\004\030\u010f\001\002\000\004\027\ufffc\001" +
    "\002\000\036\003\047\004\053\010\023\024\045\025\054" +
    "\027\050\031\037\034\056\035\033\041\060\044\064\045" +
    "\052\047\062\052\035\001\002\000\004\030\244\001\002" +
    "\000\004\027\ufffd\001\002\000\034\003\047\004\053\010" +
    "\023\024\045\025\054\027\050\031\037\034\056\035\033" +
    "\041\060\044\064\045\052\052\035\001\002\000\004\027" +
    "\ufff9\001\002\000\004\027\ufff8\001\002\000\004\027\ufff7" +
    "\001\002\000\004\027\ufffe\001\002\000\004\030\244\001" +
    "\002\000\004\027\ufffa\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0115\000\006\002\004\012\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\013\006\054\007\055\012" +
    "\056\010\071\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\054\u0112\071\u0113\001\001\000\004\054\u0111" +
    "\001\001\000\010\054\u010a\056\u0109\071\u0108\001\001\000" +
    "\066\010\030\011\021\015\025\016\020\020\016\021\056" +
    "\022\023\036\027\043\017\044\050\045\064\046\031\047" +
    "\026\051\062\052\037\053\045\057\042\063\024\064\060" +
    "\065\041\066\014\070\040\072\033\073\035\074\054\075" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\065\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\047\026\051\u0105\001" +
    "\001\000\006\036\027\070\u0104\001\001\000\052\010\030" +
    "\011\u0103\015\025\016\020\020\016\021\056\022\023\043" +
    "\017\044\050\045\064\046\031\057\042\063\024\064\060" +
    "\065\041\066\014\072\033\073\035\074\054\075\015\001" +
    "\001\000\002\001\001\000\006\065\371\073\374\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\052\037\053\344\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\330\064\115\065\114\073\331\001\001\000\016\003\324" +
    "\004\251\005\250\026\244\043\017\044\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\062\151\001\001\000" +
    "\016\003\252\004\251\005\250\026\244\043\017\044\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\121\064\115\065\114\073\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\072\001\001\000\002\001\001\000\014\015\074\050\077" +
    "\065\100\073\101\074\075\001\001\000\014\015\074\050" +
    "\110\065\100\073\101\074\075\001\001\000\014\015\074" +
    "\050\107\065\100\073\101\074\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\116\064\115\065\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\126" +
    "\001\001\000\016\014\207\033\212\034\233\064\115\065" +
    "\114\073\213\001\001\000\016\014\207\033\212\034\211" +
    "\064\115\065\114\073\213\001\001\000\004\040\127\001" +
    "\001\000\002\001\001\000\052\010\030\011\131\015\025" +
    "\016\020\020\016\021\056\022\023\043\017\044\050\045" +
    "\064\046\031\057\042\063\024\064\060\065\041\066\014" +
    "\072\033\073\035\074\054\075\015\001\001\000\004\037" +
    "\133\001\001\000\014\026\137\032\144\042\135\043\017" +
    "\044\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\026\163\027\162\030\167\031\164\032" +
    "\166\001\001\000\002\001\001\000\004\062\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\017\044\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\017\044\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\156\001\001\000\002" +
    "\001\001\000\004\062\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\174\032\166\001\001\000\002\001\001\000" +
    "\004\027\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\026\163\030\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\207\033\212\034\223\064\115\065\114\073\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\236\001\001\000\004\040\237\001" +
    "\001\000\002\001\001\000\004\035\241\001\001\000\004" +
    "\054\242\001\001\000\002\001\001\000\052\010\030\011" +
    "\021\015\025\016\020\020\016\021\056\022\023\043\017" +
    "\044\050\045\064\046\031\057\042\063\024\064\060\065" +
    "\041\066\014\072\033\073\035\074\054\075\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\275\004\251\005\250\026\244\043\017\044\245" +
    "\001\001\000\002\001\001\000\010\007\264\023\272\024" +
    "\273\001\001\000\010\006\256\025\254\054\260\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\262\005\250\026\244\043\017\044\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\264\023\272\024\273\001\001\000\002\001\001" +
    "\000\012\005\274\026\244\043\017\044\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\256\025\254\001\001" +
    "\000\002\001\001\000\016\026\300\032\304\043\017\044" +
    "\301\060\305\061\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\026\300\032\304\043\017\044\301\060\311\061" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\321\004\251\005\250\017\320\026" +
    "\244\031\315\032\166\043\017\044\245\057\316\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\151\001" +
    "\001\000\002\001\001\000\006\006\256\025\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\256\025" +
    "\254\054\325\001\001\000\002\001\001\000\004\054\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\321\004\251\005\250\017\341\026\244\031\315" +
    "\032\166\043\017\044\245\057\316\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\321\004\251\005\250\017" +
    "\347\026\244\031\315\032\166\043\017\044\245\057\316" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\353\065\352\001\001\000\002\001\001\000\016\003\355" +
    "\004\251\005\250\026\244\043\017\044\245\001\001\000" +
    "\002\001\001\000\006\006\256\025\254\001\001\000\004" +
    "\067\357\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\364\025\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\073\u0101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\065\377\073\u0100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\054\u0110\001\001\000\006\054\u010d\071\u010c\001\001" +
    "\000\002\001\001\000\062\010\030\011\021\015\025\016" +
    "\020\020\016\021\056\022\023\036\027\043\017\044\050" +
    "\045\064\046\031\047\026\051\062\057\042\063\024\064" +
    "\060\065\041\066\014\070\040\072\033\073\035\074\054" +
    "\075\015\001\001\000\004\054\u010f\001\001\000\002\001" +
    "\001\000\056\010\030\011\021\015\025\016\020\020\016" +
    "\021\056\022\023\036\027\043\017\044\050\045\064\046" +
    "\031\057\042\063\024\064\060\065\041\066\014\070\040" +
    "\072\033\073\035\074\054\075\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\054\u0114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= BLOQ_0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("S",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQ_0 ::= LAP BLOQ_1 LCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_0",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQ_1 ::= BLOQ_LISTA_STR BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQ_1 ::= BLOQ_TDEF BLOQ_LISTA_STR BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOQ_1 ::= BLOQ_TDEF BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // BLOQ_1 ::= BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // BLOQ_1 ::= BLOQ_LISTA_STR BLOQ_LISTA_DEF_FUN BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // BLOQ_1 ::= BLOQ_TDEF BLOQ_LISTA_STR BLOQ_LISTA_DEF_FUN BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // BLOQ_1 ::= BLOQ_TDEF BLOQ_LISTA_DEF_FUN BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOQ_1 ::= BLOQ_LISTA_DEF_FUN BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_1",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // BLOQ_INS ::= LAP LISTA_INS LCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_INS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // BLOQ_INS ::= LAP LCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_INS",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BLOQ_F ::= LAP LISTA_INS RETURN LCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_F",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BLOQ_STR ::= LAP LISTA_DEF LCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_STR",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BLOQ_TDEF ::= LAP LISTA_TDEF LCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_TDEF",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOQ_LISTA_STR ::= LAP LISTA_STR LCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_LISTA_STR",44, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOQ_LISTA_DEF_FUN ::= LAP LISTA_DEF_FUN LCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_LISTA_DEF_FUN",55, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_DEF ::= DEF_0 LISTA_DEF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_DEF",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_DEF ::= DEF_ARRAY LISTA_DEF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_DEF",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_DEF ::= DEF_0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_DEF",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_DEF ::= DEF_ARRAY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_DEF",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTA_STR ::= STR LISTA_STR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_STR",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTA_STR ::= STR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_STR",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTA_TDEF ::= TDEF LISTA_TDEF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_TDEF",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_TDEF ::= TDEF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_TDEF",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_INS ::= INS LISTA_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_INS",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTA_INS ::= INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_INS",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTA_DEF_FUN ::= FUNCION LISTA_DEF_FUN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_DEF_FUN",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTA_DEF_FUN ::= FUNCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA_DEF_FUN",54, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO ::= TIPO_PTR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO ::= TIPO_B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO_B ::= INT_0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_B",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_B ::= B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_B",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_B ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_B",51, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_ARRAY ::= ARRAY TIPO_B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_ARRAY ::= ARRAY TIPO_ARRAY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_ARRAY ::= ARRAY PAP ENT PCIERRE TIPO_B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_ARRAY ::= ARRAY PAP ENT PCIERRE TIPO_ARRAY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_ARRAY ::= ARRAY error IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_ARRAY ::= ARRAY error TIPO_ARRAY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_ARRAY",57, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_PTR ::= POR TIPO_B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TIPO_PTR",50, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INS ::= ASIG_0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INS ::= ASIG_2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INS ::= ASIG_ARRAY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // INS ::= DEF_0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // INS ::= DEF_ARRAY 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INS ::= DEF_PTR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INS ::= IF_I 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // INS ::= WHILE_I 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INS ::= FOR_I 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INS ::= CALL_FVOID 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INS ::= ESC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INS ::= LEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INS",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DEF_0 ::= TIPO_B IDEN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF_0",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DEF_ARRAY ::= TIPO_ARRAY IDEN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF_ARRAY",58, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DEF_PTR ::= TIPO_PTR IDEN IGUAL NEW TIPO PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEF_PTR",49, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ASIG_0 ::= IDENS IGUAL ASIG_1 PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG_0",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIG_1 ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG_1",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIG_1 ::= ENUM_LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG_1",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIG_1 ::= CALL_F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG_1",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIG_2 ::= TIPO_B IDEN IGUAL ASIG_1 PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG_2",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ASIG_ARRAY ::= TIPO_ARRAY IDEN IGUAL ASIG_1 PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ASIG_ARRAY",59, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IDENS ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IDENS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IDENS ::= ELEM_AR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IDENS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IDENS ::= IDEN PUNTO IDENS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IDENS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF_I ::= IF E0 BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_I",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF_I ::= IF E0 BLOQ_INS ELSE BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IF_I",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WHILE_I ::= WHILE E0 BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("WHILE_I",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FOR_I ::= FOR PAP ASIG_2 E0 PUNTOCOMA IT PCIERRE BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FOR_I",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FOR_I ::= FOR PAP error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FOR_I",52, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IT ::= IDEN IGUAL IDEN OP0 ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IT",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IT ::= IDEN IGUAL error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IT",53, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LEC ::= READ IDEN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LEC",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ESC ::= PRINT IDEN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ESC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E0 ::= E0 OP0 E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E1 ::= E1 OP1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E2 ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E2 ::= IDENS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E2 ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E2 ::= PAP E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP0 ::= MAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP0 ::= MENOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP0 ::= OP2_B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP1 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP1 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP1 ::= OP0_B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP1 ::= OP1_B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP0_B ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0_B",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP0_B ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP0_B",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP1_B ::= IGUALCOMP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1_B",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP1_B ::= DIST 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1_B",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP2_B ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2_B",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP2_B ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2_B",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BOOL ::= T 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BOOL",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // BOOL ::= F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("BOOL",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ENUM ::= ENT COMA ENUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ENUM",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ENUM ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ENUM",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ENUM_B ::= BOOL COMA ENUM_B 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ENUM_B",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ENUM_B ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ENUM_B",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LISTA ::= CORAP ENUM CORCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LISTA ::= CORAP ENUM error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // LISTA ::= CORAP ENUM_B CORCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // LISTA ::= CORAP ENUM_B error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // LISTA ::= CORAP ENUM_LISTA CORCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LISTA ::= CORAP ENUM_LISTA error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LISTA ::= CORAP CORCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LISTA ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LISTA",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ENUM_LISTA ::= LISTA COMA ENUM_LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ENUM_LISTA",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ENUM_LISTA ::= LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ENUM_LISTA",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ELEM_AR ::= IDEN POS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELEM_AR",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // POS ::= CORAP ENT CORCI POS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POS",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // POS ::= CORAP ENT CORCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POS",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // POS ::= CORAP IDENS CORCI POS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POS",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // POS ::= CORAP IDENS CORCI 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POS",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // POS ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("POS",48, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // PARAM ::= TIPO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAM ::= TIPO error IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARAM ::= TIPO ASP IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAM ::= TIPO ASP error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PARAM ::= TIPO_ARRAY IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PARAM ::= TIPO_ARRAY error IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PARAM ::= TIPO_ARRAY ASP IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PARAM ::= TIPO_ARRAY ASP error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // PARAM ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // PARAM_ENUM ::= PARAM COMA PARAM_ENUM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM_ENUM",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PARAM_ENUM ::= PARAM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAM_ENUM",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PARAMETROS ::= PAP PARAM_ENUM PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PARAMETROS ::= PAP PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PARAMETROS ::= error PARAM_ENUM error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PARAMETROS",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // FUNCION ::= DEF VOID IDEN PARAMETROS BLOQ_INS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCION",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // FUNCION ::= DEF TIPO IDEN PARAMETROS BLOQ_F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCION",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // FUNCION ::= DEF TIPO_ARRAY IDEN PARAMETROS BLOQ_F 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCION",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // FUNCION ::= error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("FUNCION",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DEV ::= IDENS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEV",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DEV ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEV",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DEV ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEV",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DEV ::= LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DEV",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // RETURN ::= RET DEV PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RETURN",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // CALL_F ::= IDEN PAP CALL_LISTA_PARAM PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CALL_F",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // CALL_F ::= IDEN PAP PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CALL_F",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // CALL_FVOID ::= CALL_F PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CALL_FVOID",56, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // CALL_LISTA_PARAM ::= CALL_PARAM COMA CALL_LISTA_PARAM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CALL_LISTA_PARAM",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // CALL_LISTA_PARAM ::= CALL_PARAM 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CALL_LISTA_PARAM",46, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // CALL_PARAM ::= IDENS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CALL_PARAM",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CALL_PARAM ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CALL_PARAM",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CALL_PARAM ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CALL_PARAM",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CALL_PARAM ::= LISTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CALL_PARAM",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // STR ::= STRUCT IDEN BLOQ_STR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STR",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // STR ::= STRUCT error 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("STR",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TDEF ::= TYPEDEF TIPO IDEN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TDEF",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TDEF ::= TYPEDEF TIPO_ARRAY IDEN PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TDEF",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

