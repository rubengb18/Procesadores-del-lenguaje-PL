
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 15 22:04:59 CEST 2022
//----------------------------------------------------

package constructorast;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import alex.TokenValue;
import errors.GestionErroresTiny;
import ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 15 22:04:59 CEST 2022
  */
public class ConstructorASTTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTTiny() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\226\000\002\054\020\000\002\002\004\000\002\054" +
    "\015\000\002\054\012\000\002\054\007\000\002\054\015" +
    "\000\002\054\015\000\002\054\012\000\002\054\012\000" +
    "\002\003\005\000\002\003\005\000\002\003\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\005\000\002\006\003" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\003\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\005\000\002\016\003\000\002\016\005\000\002" +
    "\017\005\000\002\017\005\000\002\020\004\000\002\020" +
    "\004\000\002\012\005\000\002\012\005\000\002\012\003" +
    "\000\002\013\005\000\002\013\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\015\005\000\002" +
    "\015\003\000\002\010\003\000\002\011\003\000\002\026" +
    "\006\000\002\027\005\000\002\026\006\000\002\026\006" +
    "\000\002\026\006\000\002\026\007\000\002\026\007\000" +
    "\002\026\007\000\002\026\007\000\002\026\007\000\002" +
    "\026\006\000\002\026\006\000\002\026\006\000\002\026" +
    "\007\000\002\026\007\000\002\025\004\000\002\025\005" +
    "\000\002\025\004\000\002\025\005\000\002\025\010\000" +
    "\002\025\007\000\002\030\004\000\002\030\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\022" +
    "\004\000\002\022\004\000\002\022\007\000\002\022\007" +
    "\000\002\024\004\000\002\052\006\000\002\052\006\000" +
    "\002\052\006\000\002\053\004\000\002\053\003\000\002" +
    "\050\007\000\002\050\007\000\002\051\004\000\002\051" +
    "\003\000\002\031\005\000\002\031\005\000\002\032\005" +
    "\000\002\032\005\000\002\033\007\000\002\033\013\000" +
    "\002\033\013\000\002\033\013\000\002\034\007\000\002" +
    "\034\007\000\002\040\014\000\002\040\014\000\002\040" +
    "\014\000\002\040\013\000\002\040\014\000\002\035\005" +
    "\000\002\035\005\000\002\037\006\000\002\037\006\000" +
    "\002\041\007\000\002\041\007\000\002\036\004\000\002" +
    "\036\004\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\004\000\002\036\004\000\002\036\004" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\023\003\000\002\046" +
    "\013\000\002\046\013\000\002\046\012\000\002\046\014" +
    "\000\002\046\014\000\002\046\013\000\002\043\005\000" +
    "\002\043\005\000\002\043\003\000\002\042\004\000\002" +
    "\042\005\000\002\042\004\000\002\042\005\000\002\044" +
    "\005\000\002\044\003\000\002\045\003\000\002\047\004" +
    "\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0188\000\004\026\005\001\002\000\004\002\u018a\001" +
    "\002\000\004\026\006\001\002\000\034\005\034\006\012" +
    "\010\024\022\022\023\014\032\032\034\037\035\007\037" +
    "\044\042\020\045\026\046\031\047\047\001\002\000\006" +
    "\003\u0187\042\060\001\002\000\032\010\024\022\022\023" +
    "\014\025\uff84\033\uff84\034\037\035\007\037\044\042\020" +
    "\045\026\046\031\047\047\001\002\000\032\010\024\022" +
    "\022\023\014\025\uff7f\033\uff7f\034\037\035\007\037\044" +
    "\042\020\045\026\046\031\047\047\001\002\000\006\003" +
    "\u0177\042\060\001\002\000\004\025\u015f\001\002\000\016" +
    "\003\u0157\014\126\041\056\042\060\043\130\044\135\001" +
    "\002\000\006\025\uff6c\032\032\001\002\000\006\012\u014f" +
    "\052\075\001\002\000\004\025\u0144\001\002\000\016\003" +
    "\uffcd\012\uffcd\014\uffcd\040\uffcd\042\uffb2\052\uffcd\001\002" +
    "\000\014\003\u013c\012\uffdd\014\u013d\040\067\052\uffdd\001" +
    "\002\000\016\003\u0128\014\126\041\056\042\060\043\130" +
    "\044\135\001\002\000\032\010\024\022\022\023\014\025" +
    "\uff82\033\uff82\034\037\035\007\037\044\042\020\045\026" +
    "\046\031\047\047\001\002\000\010\042\054\045\026\046" +
    "\031\001\002\000\006\012\u011d\052\075\001\002\000\036" +
    "\010\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\033\uffb4\034" +
    "\uffb4\035\uffb4\037\uffb4\042\uffb4\045\uffb4\046\uffb4\047\uffb4" +
    "\051\uffb4\001\002\000\004\042\060\001\002\000\006\006" +
    "\012\025\uffa4\001\002\000\036\010\uffb3\022\uffb3\023\uffb3" +
    "\024\uffb3\025\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3\042" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\051\uffb3\001\002\000\014" +
    "\042\054\045\026\046\031\047\047\050\336\001\002\000" +
    "\004\025\332\001\002\000\014\003\321\042\054\045\026" +
    "\046\031\047\047\001\002\000\004\042\060\001\002\000" +
    "\006\005\034\025\uffa8\001\002\000\006\003\313\042\060" +
    "\001\002\000\004\042\060\001\002\000\004\025\303\001" +
    "\002\000\032\010\024\022\022\023\014\025\uff86\033\uff86" +
    "\034\037\035\007\037\044\042\020\045\026\046\031\047" +
    "\047\001\002\000\032\010\024\022\022\023\014\025\uff85" +
    "\033\uff85\034\037\035\007\037\044\042\020\045\026\046" +
    "\031\047\047\001\002\000\004\014\117\001\002\000\032" +
    "\010\024\022\022\023\014\025\uff81\033\uff81\034\037\035" +
    "\007\037\044\042\020\045\026\046\031\047\047\001\002" +
    "\000\032\010\024\022\022\023\014\025\uff80\033\uff80\034" +
    "\037\035\007\037\044\042\020\045\026\046\031\047\047" +
    "\001\002\000\014\014\052\042\054\045\026\046\031\047" +
    "\047\001\002\000\032\010\024\022\022\023\014\025\uff83" +
    "\033\uff83\034\037\035\007\037\044\042\020\045\026\046" +
    "\031\047\047\001\002\000\006\025\uff8b\033\uff8b\001\002" +
    "\000\010\014\057\041\056\042\060\001\002\000\006\042" +
    "\uffb1\051\uffb1\001\002\000\036\010\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\033\uffb2\034\uffb2\035\uffb2\037\uffb2\042" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\051\uffb2\001\002\000\006" +
    "\042\uffb0\051\uffb0\001\002\000\034\004\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\013\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2" +
    "\021\ufff2\024\ufff2\026\ufff2\053\ufff2\001\002\000\010\014" +
    "\057\041\056\042\060\001\002\000\074\003\uffcd\004\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\033\uffcd\034\uffcd\035\uffcd\037" +
    "\uffcd\040\uffcd\042\uffcd\045\uffcd\046\uffcd\047\uffcd\052\uffcd" +
    "\053\uffcd\001\002\000\034\004\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\024\ufff3\026\ufff3\053\ufff3\001\002\000\036\004\uffef\007" +
    "\uffef\010\uffef\011\uffef\013\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\024\uffef\026\uffef\052\075\053\uffef\001" +
    "\002\000\010\004\102\007\103\015\107\001\002\000\036" +
    "\004\ufff1\007\ufff1\010\ufff1\011\ufff1\013\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\024\ufff1\026\ufff1\052\075" +
    "\053\ufff1\001\002\000\032\004\ufff6\007\ufff6\010\072\011" +
    "\071\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6" +
    "\024\ufff6\053\ufff6\001\002\000\042\004\uffdd\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\024\uffdd\026\uffdd\040\067\052\uffdd\053" +
    "\uffdd\001\002\000\004\042\060\001\002\000\040\004\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\024\uffdc\026\uffdc\052\uffdc" +
    "\053\uffdc\001\002\000\010\014\057\041\056\042\060\001" +
    "\002\000\010\014\057\041\056\042\060\001\002\000\034" +
    "\004\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\024\ufff5\026\ufff5\053\ufff5" +
    "\001\002\000\034\004\ufff4\007\ufff4\010\ufff4\011\ufff4\013" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\024\ufff4" +
    "\026\ufff4\053\ufff4\001\002\000\012\003\100\014\057\041" +
    "\056\042\060\001\002\000\040\004\uffd8\007\uffd8\010\uffd8" +
    "\011\uffd8\012\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\024\uffd8\026\uffd8\052\uffd8\053\uffd8\001\002" +
    "\000\010\004\102\007\103\053\104\001\002\000\004\053" +
    "\101\001\002\000\040\004\uffda\007\uffda\010\uffda\011\uffda" +
    "\012\uffda\013\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\024\uffda\026\uffda\052\uffda\053\uffda\001\002\000\010" +
    "\014\057\041\056\042\060\001\002\000\010\014\057\041" +
    "\056\042\060\001\002\000\040\004\uffdb\007\uffdb\010\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\024\uffdb\026\uffdb\052\uffdb\053\uffdb\001\002" +
    "\000\032\004\ufff7\007\ufff7\010\072\011\071\013\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\024\ufff7\053\ufff7" +
    "\001\002\000\032\004\ufff8\007\ufff8\010\072\011\071\013" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\024\ufff8" +
    "\053\ufff8\001\002\000\012\042\054\045\026\046\031\047" +
    "\047\001\002\000\006\042\uffaf\051\uffaf\001\002\000\006" +
    "\042\uffae\051\uffae\001\002\000\040\004\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\024\uffd9\026\uffd9\052\uffd9\053\uffd9\001" +
    "\002\000\010\004\102\007\103\015\114\001\002\000\034" +
    "\004\ufff0\007\ufff0\010\ufff0\011\ufff0\013\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\024\ufff0\026\ufff0\053\ufff0" +
    "\001\002\000\006\025\uff88\033\uff88\001\002\000\006\025" +
    "\uff89\033\uff89\001\002\000\014\003\122\042\020\045\026" +
    "\046\031\047\047\001\002\000\016\003\255\014\126\041" +
    "\056\042\060\043\130\044\135\001\002\000\004\042\060" +
    "\001\002\000\014\014\126\041\056\042\060\043\130\044" +
    "\135\001\002\000\004\042\060\001\002\000\004\012\125" +
    "\001\002\000\014\014\126\041\056\042\060\043\130\044" +
    "\135\001\002\000\014\014\126\041\056\042\060\043\130" +
    "\044\135\001\002\000\004\024\204\001\002\000\030\013" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\024\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\053\uffe0\001\002\000\020\004" +
    "\102\007\103\016\161\017\160\020\156\021\157\024\203" +
    "\001\002\000\024\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\001\002\000\032" +
    "\004\uffdd\007\uffdd\010\uffdd\011\uffdd\014\172\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\024\uffdd\040\067\052\uffdd\001\002" +
    "\000\014\016\151\017\150\020\145\021\147\024\171\001" +
    "\002\000\030\013\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf" +
    "\021\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\053\uffdf\001" +
    "\002\000\024\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\024\uffe4\026\uffe4\027\137\030\140\001\002\000\010\014" +
    "\141\043\130\044\135\001\002\000\010\014\141\043\130" +
    "\044\135\001\002\000\014\014\126\041\056\042\060\043" +
    "\130\044\135\001\002\000\024\015\uffe2\016\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\001" +
    "\002\000\016\004\102\007\103\016\161\017\160\020\156" +
    "\021\157\001\002\000\014\015\146\016\151\017\150\020" +
    "\145\021\147\001\002\000\010\014\141\043\130\044\135" +
    "\001\002\000\030\013\uffde\015\uffde\016\uffde\017\uffde\020" +
    "\uffde\021\uffde\024\uffde\026\uffde\027\uffde\030\uffde\053\uffde" +
    "\001\002\000\010\014\141\043\130\044\135\001\002\000" +
    "\010\014\141\043\130\044\135\001\002\000\010\014\141" +
    "\043\130\044\135\001\002\000\024\015\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\021\uffe7\024\uffe7\026\uffe7\027\137\030\140" +
    "\001\002\000\024\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\024\uffe6\026\uffe6\027\137\030\140\001\002\000\024" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\024\uffe5\026" +
    "\uffe5\027\137\030\140\001\002\000\024\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\024\uffe8\026\uffe8\027\137\030" +
    "\140\001\002\000\014\014\126\041\056\042\060\043\130" +
    "\044\135\001\002\000\014\014\126\041\056\042\060\043" +
    "\130\044\135\001\002\000\010\014\057\041\056\042\060" +
    "\001\002\000\010\014\057\041\056\042\060\001\002\000" +
    "\024\010\072\011\071\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\024\uffed\026\uffed\001\002\000\024\010\072\011" +
    "\071\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\024\uffec" +
    "\026\uffec\001\002\000\024\010\072\011\071\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\024\uffeb\026\uffeb\001\002" +
    "\000\024\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\024" +
    "\uffe9\026\uffe9\027\137\030\140\001\002\000\024\010\072" +
    "\011\071\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\024" +
    "\uffee\026\uffee\001\002\000\024\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\024\uffea\026\uffea\027\137\030\140\001" +
    "\002\000\024\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\024\uffe3\026\uffe3\027\uffe3\030\uffe3\001\002\000\044\003" +
    "\uffc5\010\uffc5\014\uffc5\022\uffc5\023\uffc5\025\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\037\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\001\002\000\012\014\057" +
    "\015\174\041\056\042\060\001\002\000\012\004\102\007" +
    "\103\013\uff6e\015\uff6e\001\002\000\004\024\202\001\002" +
    "\000\006\013\200\015\uff6f\001\002\000\004\015\177\001" +
    "\002\000\004\024\uff91\001\002\000\010\014\057\041\056" +
    "\042\060\001\002\000\004\015\uff70\001\002\000\004\024" +
    "\uff92\001\002\000\044\003\uffc6\010\uffc6\014\uffc6\022\uffc6" +
    "\023\uffc6\025\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\001\002\000\044\003\uffbe\010\uffbe\014\uffbe\022\uffbe\023" +
    "\uffbe\025\uffbe\033\uffbe\034\uffbe\035\uffbe\037\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\001" +
    "\002\000\020\004\102\007\103\015\114\016\161\017\160" +
    "\020\156\021\157\001\002\000\014\016\151\017\150\020" +
    "\145\021\147\024\207\001\002\000\004\042\060\001\002" +
    "\000\004\012\216\001\002\000\004\015\212\001\002\000" +
    "\004\026\213\001\002\000\026\010\024\022\022\023\014" +
    "\034\037\035\007\037\044\042\020\045\026\046\031\047" +
    "\047\001\002\000\004\025\215\001\002\000\032\010\uff98" +
    "\022\uff98\023\uff98\025\uff98\033\uff98\034\uff98\035\uff98\037" +
    "\uff98\042\uff98\045\uff98\046\uff98\047\uff98\001\002\000\010" +
    "\014\057\041\056\042\060\001\002\000\010\004\102\007" +
    "\103\015\uffca\001\002\000\004\012\221\001\002\000\006" +
    "\042\060\052\224\001\002\000\004\024\254\001\002\000" +
    "\006\024\253\052\075\001\002\000\014\014\141\041\236" +
    "\043\130\044\135\052\224\001\002\000\010\013\232\024" +
    "\uffce\053\uffce\001\002\000\004\024\231\001\002\000\006" +
    "\024\230\052\075\001\002\000\044\003\uffc2\010\uffc2\014" +
    "\uffc2\022\uffc2\023\uffc2\025\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\037\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046" +
    "\uffc2\047\uffc2\001\002\000\044\003\uffbd\010\uffbd\014\uffbd" +
    "\022\uffbd\023\uffbd\025\uffbd\033\uffbd\034\uffbd\035\uffbd\037" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\001\002\000\004\052\224\001\002\000\006\024" +
    "\uffcf\053\uffcf\001\002\000\010\003\250\013\247\053\uffd5" +
    "\001\002\000\004\053\246\001\002\000\010\003\uffcc\013" +
    "\uffcc\053\uffcc\001\002\000\006\013\244\053\uffd3\001\002" +
    "\000\004\053\243\001\002\000\004\053\242\001\002\000" +
    "\010\013\uffd1\024\uffd1\053\uffd1\001\002\000\010\013\uffd2" +
    "\024\uffd2\053\uffd2\001\002\000\010\014\141\043\130\044" +
    "\135\001\002\000\004\053\uffd4\001\002\000\010\013\uffd0" +
    "\024\uffd0\053\uffd0\001\002\000\004\041\236\001\002\000" +
    "\004\041\236\001\002\000\004\053\uffd6\001\002\000\004" +
    "\053\uffd7\001\002\000\044\003\uffc3\010\uffc3\014\uffc3\022" +
    "\uffc3\023\uffc3\025\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\001\002\000\044\003\uffc4\010\uffc4\014\uffc4\022\uffc4" +
    "\023\uffc4\025\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\001\002\000\004\024\273\001\002\000\014\016\151\017" +
    "\150\020\145\021\147\024\257\001\002\000\006\003\260" +
    "\042\060\001\002\000\004\026\270\001\002\000\004\015" +
    "\262\001\002\000\004\026\263\001\002\000\030\003\265" +
    "\010\024\022\022\023\014\034\037\035\007\037\044\042" +
    "\020\045\026\046\031\047\047\001\002\000\004\025\267" +
    "\001\002\000\004\025\266\001\002\000\032\010\uff95\022" +
    "\uff95\023\uff95\025\uff95\033\uff95\034\uff95\035\uff95\037\uff95" +
    "\042\uff95\045\uff95\046\uff95\047\uff95\001\002\000\032\010" +
    "\uff99\022\uff99\023\uff99\025\uff99\033\uff99\034\uff99\035\uff99" +
    "\037\uff99\042\uff99\045\uff99\046\uff99\047\uff99\001\002\000" +
    "\026\010\024\022\022\023\014\034\037\035\007\037\044" +
    "\042\020\045\026\046\031\047\047\001\002\000\004\025" +
    "\272\001\002\000\032\010\uff96\022\uff96\023\uff96\025\uff96" +
    "\033\uff96\034\uff96\035\uff96\037\uff96\042\uff96\045\uff96\046" +
    "\uff96\047\uff96\001\002\000\004\042\060\001\002\000\004" +
    "\015\275\001\002\000\004\026\276\001\002\000\026\010" +
    "\024\022\022\023\014\034\037\035\007\037\044\042\020" +
    "\045\026\046\031\047\047\001\002\000\004\025\300\001" +
    "\002\000\032\010\uff97\022\uff97\023\uff97\025\uff97\033\uff97" +
    "\034\uff97\035\uff97\037\uff97\042\uff97\045\uff97\046\uff97\047" +
    "\uff97\001\002\000\006\025\uff8d\033\uff8d\001\002\000\006" +
    "\025\uff8e\033\uff8e\001\002\000\004\026\304\001\002\000" +
    "\026\010\024\022\022\023\014\034\037\035\007\037\044" +
    "\042\020\045\026\046\031\047\047\001\002\000\004\025" +
    "\306\001\002\000\004\025\307\001\002\000\004\002\ufffe" +
    "\001\002\000\036\010\uffba\012\221\022\uffba\023\uffba\024" +
    "\311\025\uffba\033\uffba\034\uffba\035\uffba\037\uffba\042\uffba" +
    "\045\uffba\046\uffba\047\uffba\001\002\000\032\010\uffb9\022" +
    "\uffb9\023\uffb9\025\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9" +
    "\042\uffb9\045\uffb9\046\uffb9\047\uffb9\001\002\000\004\024" +
    "\315\001\002\000\004\024\314\001\002\000\032\010\uffa2" +
    "\022\uffa2\023\uffa2\025\uffa2\033\uffa2\034\uffa2\035\uffa2\037" +
    "\uffa2\042\uffa2\045\uffa2\046\uffa2\047\uffa2\001\002\000\032" +
    "\010\uffa3\022\uffa3\023\uffa3\025\uffa3\033\uffa3\034\uffa3\035" +
    "\uffa3\037\uffa3\042\uffa3\045\uffa3\046\uffa3\047\uffa3\001\002" +
    "\000\004\025\uffa9\001\002\000\036\010\uffbc\012\125\022" +
    "\uffbc\023\uffbc\024\320\025\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\037\uffbc\042\uffbc\045\uffbc\046\uffbc\047\uffbc\001\002\000" +
    "\032\010\uffbb\022\uffbb\023\uffbb\025\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\037\uffbb\042\uffbb\045\uffbb\046\uffbb\047\uffbb\001" +
    "\002\000\004\042\060\001\002\000\004\042\060\001\002" +
    "\000\004\042\060\001\002\000\004\024\325\001\002\000" +
    "\006\005\uffab\025\uffab\001\002\000\004\024\327\001\002" +
    "\000\006\005\uffac\025\uffac\001\002\000\004\024\331\001" +
    "\002\000\006\005\uffaa\025\uffaa\001\002\000\004\025\333" +
    "\001\002\000\004\002\ufffd\001\002\000\004\042\060\001" +
    "\002\000\004\042\060\001\002\000\004\042\uff7e\001\002" +
    "\000\004\042\060\001\002\000\004\014\341\001\002\000" +
    "\014\015\345\042\054\045\026\046\031\047\047\001\002" +
    "\000\004\015\372\001\002\000\006\042\060\051\370\001" +
    "\002\000\006\042\060\051\365\001\002\000\004\026\353" +
    "\001\002\000\010\003\350\013\347\015\uff75\001\002\000" +
    "\012\042\054\045\026\046\031\047\047\001\002\000\012" +
    "\042\054\045\026\046\031\047\047\001\002\000\004\015" +
    "\uff76\001\002\000\004\015\uff77\001\002\000\026\010\024" +
    "\022\022\023\014\034\037\035\007\037\044\042\020\045" +
    "\026\046\031\047\047\001\002\000\004\033\355\001\002" +
    "\000\012\003\361\014\057\041\056\042\060\001\002\000" +
    "\004\025\357\001\002\000\006\025\uff7c\032\uff7c\001\002" +
    "\000\004\024\363\001\002\000\004\024\362\001\002\000" +
    "\004\025\uff93\001\002\000\004\025\uff94\001\002\000\010" +
    "\003\uff74\013\uff74\015\uff74\001\002\000\004\042\060\001" +
    "\002\000\010\003\uff73\013\uff73\015\uff73\001\002\000\010" +
    "\003\uff72\013\uff72\015\uff72\001\002\000\004\042\060\001" +
    "\002\000\010\003\uff71\013\uff71\015\uff71\001\002\000\004" +
    "\026\373\001\002\000\026\010\024\022\022\023\014\034" +
    "\037\035\007\037\044\042\020\045\026\046\031\047\047" +
    "\001\002\000\004\033\355\001\002\000\004\025\376\001" +
    "\002\000\006\025\uff79\032\uff79\001\002\000\004\014\u0100" +
    "\001\002\000\014\015\u0102\042\054\045\026\046\031\047" +
    "\047\001\002\000\004\015\u0107\001\002\000\004\026\u0103" +
    "\001\002\000\026\010\024\022\022\023\014\034\037\035" +
    "\007\037\044\042\020\045\026\046\031\047\047\001\002" +
    "\000\004\033\355\001\002\000\004\025\u0106\001\002\000" +
    "\006\025\uff7d\032\uff7d\001\002\000\004\026\u0108\001\002" +
    "\000\026\010\024\022\022\023\014\034\037\035\007\037" +
    "\044\042\020\045\026\046\031\047\047\001\002\000\004" +
    "\033\355\001\002\000\004\025\u010b\001\002\000\006\025" +
    "\uff7a\032\uff7a\001\002\000\004\014\u010d\001\002\000\014" +
    "\015\u010f\042\054\045\026\046\031\047\047\001\002\000" +
    "\004\015\u0113\001\002\000\004\026\u0110\001\002\000\026" +
    "\010\024\022\022\023\014\034\037\035\007\037\044\042" +
    "\020\045\026\046\031\047\047\001\002\000\004\025\u0112" +
    "\001\002\000\006\025\uff7b\032\uff7b\001\002\000\004\026" +
    "\u0114\001\002\000\026\010\024\022\022\023\014\034\037" +
    "\035\007\037\044\042\020\045\026\046\031\047\047\001" +
    "\002\000\004\025\u0116\001\002\000\006\025\uff78\032\uff78" +
    "\001\002\000\004\025\uffa5\001\002\000\004\012\u0119\001" +
    "\002\000\004\036\u011a\001\002\000\010\042\054\045\026" +
    "\046\031\001\002\000\034\010\uffb7\022\uffb7\023\uffb7\024" +
    "\u011c\025\uffb7\033\uffb7\034\uffb7\035\uffb7\037\uffb7\042\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\001\002\000\032\010\uffb8\022" +
    "\uffb8\023\uffb8\025\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8" +
    "\042\uffb8\045\uffb8\046\uffb8\047\uffb8\001\002\000\016\014" +
    "\126\041\056\042\060\043\130\044\135\052\224\001\002" +
    "\000\020\004\102\007\103\016\161\017\160\020\156\021" +
    "\157\024\u0125\001\002\000\004\024\u0124\001\002\000\014" +
    "\016\151\017\150\020\145\021\147\024\u0123\001\002\000" +
    "\004\024\u0122\001\002\000\044\003\uffbf\010\uffbf\014\uffbf" +
    "\022\uffbf\023\uffbf\025\uffbf\033\uffbf\034\uffbf\035\uffbf\037" +
    "\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\001\002\000\044\003\uffc8\010\uffc8\014\uffc8\022" +
    "\uffc8\023\uffc8\025\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\001\002\000\044\003\uffc1\010\uffc1\014\uffc1\022\uffc1" +
    "\023\uffc1\025\uffc1\033\uffc1\034\uffc1\035\uffc1\037\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1" +
    "\001\002\000\044\003\uffcb\010\uffcb\014\uffcb\022\uffcb\023" +
    "\uffcb\025\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\001" +
    "\002\000\004\042\uffad\001\002\000\006\025\uff8a\033\uff8a" +
    "\001\002\000\004\026\u0135\001\002\000\014\016\151\017" +
    "\150\020\145\021\147\026\u012a\001\002\000\026\010\024" +
    "\022\022\023\014\034\037\035\007\037\044\042\020\045" +
    "\026\046\031\047\047\001\002\000\004\025\u012c\001\002" +
    "\000\036\003\u012e\010\uff9f\022\uff9f\023\uff9f\025\uff9f\031" +
    "\u012d\033\uff9f\034\uff9f\035\uff9f\037\uff9f\042\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\001\002\000\004\026\u0132\001\002\000" +
    "\004\026\u012f\001\002\000\026\010\024\022\022\023\014" +
    "\034\037\035\007\037\044\042\020\045\026\046\031\047" +
    "\047\001\002\000\004\025\u0131\001\002\000\032\010\uff9d" +
    "\022\uff9d\023\uff9d\025\uff9d\033\uff9d\034\uff9d\035\uff9d\037" +
    "\uff9d\042\uff9d\045\uff9d\046\uff9d\047\uff9d\001\002\000\026" +
    "\010\024\022\022\023\014\034\037\035\007\037\044\042" +
    "\020\045\026\046\031\047\047\001\002\000\004\025\u0134" +
    "\001\002\000\032\010\uff9e\022\uff9e\023\uff9e\025\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\037\uff9e\042\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\001\002\000\026\010\024\022\022\023\014\034" +
    "\037\035\007\037\044\042\020\045\026\046\031\047\047" +
    "\001\002\000\004\025\u0137\001\002\000\004\031\u0138\001" +
    "\002\000\004\026\u0139\001\002\000\026\010\024\022\022" +
    "\023\014\034\037\035\007\037\044\042\020\045\026\046" +
    "\031\047\047\001\002\000\004\025\u013b\001\002\000\032" +
    "\010\uff9c\022\uff9c\023\uff9c\025\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\037\uff9c\042\uff9c\045\uff9c\046\uff9c\047\uff9c\001\002" +
    "\000\010\014\057\041\056\042\060\001\002\000\010\014" +
    "\057\041\056\042\060\001\002\000\004\015\u013f\001\002" +
    "\000\004\024\u0140\001\002\000\032\010\uff90\022\uff90\023" +
    "\uff90\025\uff90\033\uff90\034\uff90\035\uff90\037\uff90\042\uff90" +
    "\045\uff90\046\uff90\047\uff90\001\002\000\004\015\u0142\001" +
    "\002\000\004\024\u0143\001\002\000\032\010\uff8f\022\uff8f" +
    "\023\uff8f\025\uff8f\033\uff8f\034\uff8f\035\uff8f\037\uff8f\042" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\001\002\000\004\026\u0145" +
    "\001\002\000\030\010\024\022\022\023\014\032\032\034" +
    "\037\035\007\037\044\042\020\045\026\046\031\047\047" +
    "\001\002\000\004\025\u014d\001\002\000\004\025\u0148\001" +
    "\002\000\004\026\u0149\001\002\000\026\010\024\022\022" +
    "\023\014\034\037\035\007\037\044\042\020\045\026\046" +
    "\031\047\047\001\002\000\004\025\u014b\001\002\000\004" +
    "\025\u014c\001\002\000\004\002\uffff\001\002\000\004\025" +
    "\u014e\001\002\000\004\002\ufffa\001\002\000\016\014\126" +
    "\041\056\042\060\043\130\044\135\052\224\001\002\000" +
    "\004\024\u0155\001\002\000\020\004\102\007\103\016\161" +
    "\017\160\020\156\021\157\024\u0154\001\002\000\014\016" +
    "\151\017\150\020\145\021\147\024\u0153\001\002\000\044" +
    "\003\uffc7\010\uffc7\014\uffc7\022\uffc7\023\uffc7\025\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\037\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\001\002\000\044\003" +
    "\uffc9\010\uffc9\014\uffc9\022\uffc9\023\uffc9\025\uffc9\033\uffc9" +
    "\034\uffc9\035\uffc9\037\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\001\002\000\044\003\uffc0" +
    "\010\uffc0\014\uffc0\022\uffc0\023\uffc0\025\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\037\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\001\002\000\004\025\uff6d\001" +
    "\002\000\004\026\u015c\001\002\000\014\016\151\017\150" +
    "\020\145\021\147\026\u0159\001\002\000\026\010\024\022" +
    "\022\023\014\034\037\035\007\037\044\042\020\045\026" +
    "\046\031\047\047\001\002\000\004\025\u015b\001\002\000" +
    "\032\010\uff9b\022\uff9b\023\uff9b\025\uff9b\033\uff9b\034\uff9b" +
    "\035\uff9b\037\uff9b\042\uff9b\045\uff9b\046\uff9b\047\uff9b\001" +
    "\002\000\026\010\024\022\022\023\014\034\037\035\007" +
    "\037\044\042\020\045\026\046\031\047\047\001\002\000" +
    "\004\025\u015e\001\002\000\032\010\uff9a\022\uff9a\023\uff9a" +
    "\025\uff9a\033\uff9a\034\uff9a\035\uff9a\037\uff9a\042\uff9a\045" +
    "\uff9a\046\uff9a\047\uff9a\001\002\000\004\026\u0160\001\002" +
    "\000\032\006\012\010\024\022\022\023\014\032\032\034" +
    "\037\035\007\037\044\042\020\045\026\046\031\047\047" +
    "\001\002\000\004\025\u016b\001\002\000\004\025\u0169\001" +
    "\002\000\004\025\u0164\001\002\000\004\026\u0165\001\002" +
    "\000\026\010\024\022\022\023\014\034\037\035\007\037" +
    "\044\042\020\045\026\046\031\047\047\001\002\000\004" +
    "\025\u0167\001\002\000\004\025\u0168\001\002\000\004\002" +
    "\ufffb\001\002\000\004\025\u016a\001\002\000\004\002\ufff9" +
    "\001\002\000\004\026\u016c\001\002\000\030\010\024\022" +
    "\022\023\014\032\032\034\037\035\007\037\044\042\020" +
    "\045\026\046\031\047\047\001\002\000\004\025\u0174\001" +
    "\002\000\004\025\u016f\001\002\000\004\026\u0170\001\002" +
    "\000\026\010\024\022\022\023\014\034\037\035\007\037" +
    "\044\042\020\045\026\046\031\047\047\001\002\000\004" +
    "\025\u0172\001\002\000\004\025\u0173\001\002\000\004\002" +
    "\001\001\002\000\004\025\u0175\001\002\000\004\002\ufffc" +
    "\001\002\000\004\026\u0181\001\002\000\004\026\u0178\001" +
    "\002\000\014\010\024\042\054\045\026\046\031\047\047" +
    "\001\002\000\016\010\024\025\uffb5\042\054\045\026\046" +
    "\031\047\047\001\002\000\004\042\060\001\002\000\004" +
    "\042\060\001\002\000\004\025\u017d\001\002\000\006\006" +
    "\uffa6\025\uffa6\001\002\000\020\010\uffbc\024\320\025\uffbc" +
    "\042\uffbc\045\uffbc\046\uffbc\047\uffbc\001\002\000\020\010" +
    "\uffba\024\311\025\uffba\042\uffba\045\uffba\046\uffba\047\uffba" +
    "\001\002\000\004\025\uffb6\001\002\000\014\010\024\042" +
    "\054\045\026\046\031\047\047\001\002\000\004\025\u0183" +
    "\001\002\000\006\006\uffa7\025\uffa7\001\002\000\006\025" +
    "\uff87\033\uff87\001\002\000\006\025\uff8c\033\uff8c\001\002" +
    "\000\004\024\u0189\001\002\000\004\024\u0188\001\002\000" +
    "\032\010\uffa0\022\uffa0\023\uffa0\025\uffa0\033\uffa0\034\uffa0" +
    "\035\uffa0\037\uffa0\042\uffa0\045\uffa0\046\uffa0\047\uffa0\001" +
    "\002\000\032\010\uffa1\022\uffa1\023\uffa1\025\uffa1\033\uffa1" +
    "\034\uffa1\035\uffa1\037\uffa1\042\uffa1\045\uffa1\046\uffa1\047" +
    "\uffa1\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0188\000\004\054\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\010\020\016\024\020\015\021\034" +
    "\022\037\024\026\025\041\026\042\031\047\032\007\033" +
    "\022\034\044\036\032\040\010\041\045\046\014\047\040" +
    "\050\027\051\016\052\035\053\012\001\001\000\004\010" +
    "\u0185\001\001\000\040\010\020\016\024\020\015\021\034" +
    "\022\037\024\026\025\041\026\042\031\047\032\007\033" +
    "\022\034\044\036\u0184\040\010\041\045\001\001\000\040" +
    "\010\020\016\024\020\015\021\034\022\037\024\026\025" +
    "\041\026\042\031\047\032\007\033\022\034\044\036\u0183" +
    "\040\010\041\045\001\001\000\004\010\u0175\001\001\000" +
    "\002\001\001\000\024\002\u0157\003\142\004\064\005\135" +
    "\006\060\007\131\010\065\016\063\020\061\001\001\000" +
    "\006\046\014\047\u0155\001\001\000\004\017\111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\u0128\003\142\004\064\005\135\006\060\007\131" +
    "\010\065\016\063\020\061\001\001\000\040\010\020\016" +
    "\024\020\015\021\034\022\037\024\026\025\041\026\042" +
    "\031\047\032\007\033\022\034\044\036\u0126\040\010\041" +
    "\045\001\001\000\004\021\u0125\001\001\000\004\017\075" +
    "\001\001\000\002\001\001\000\004\010\u0117\001\001\000" +
    "\006\050\027\051\u0116\001\001\000\002\001\001\000\010" +
    "\021\334\022\336\023\333\001\001\000\002\001\001\000" +
    "\006\021\321\022\322\001\001\000\004\010\316\001\001" +
    "\000\006\052\035\053\315\001\001\000\004\010\311\001" +
    "\001\000\004\010\307\001\001\000\002\001\001\000\040" +
    "\010\020\016\024\020\015\021\034\022\037\024\026\025" +
    "\041\026\042\031\047\032\007\033\022\034\044\036\301" +
    "\040\010\041\045\001\001\000\040\010\020\016\024\020" +
    "\015\021\034\022\037\024\026\025\041\026\042\031\047" +
    "\032\007\033\022\034\044\036\300\040\010\041\045\001" +
    "\001\000\002\001\001\000\040\010\020\016\024\020\015" +
    "\021\034\022\037\024\026\025\041\026\042\031\047\032" +
    "\007\033\022\034\044\036\115\040\010\041\045\001\001" +
    "\000\040\010\020\016\024\020\015\021\034\022\037\024" +
    "\026\025\041\026\042\031\047\032\007\033\022\034\044" +
    "\036\114\040\010\041\045\001\001\000\006\021\052\022" +
    "\054\001\001\000\040\010\020\016\024\020\015\021\034" +
    "\022\037\024\026\025\041\026\042\031\047\032\007\033" +
    "\022\034\044\036\050\040\010\041\045\001\001\000\002" +
    "\001\001\000\016\003\062\004\064\006\060\010\065\016" +
    "\063\020\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\112\004" +
    "\064\006\060\010\065\016\063\020\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\111\001\001\000" +
    "\002\001\001\000\004\017\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\065\016\067\001\001\000" +
    "\002\001\001\000\012\006\073\010\065\016\063\020\061" +
    "\001\001\000\012\006\072\010\065\016\063\020\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\076" +
    "\004\064\006\060\010\065\016\063\020\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\105\006\060\010\065\016\063\020" +
    "\061\001\001\000\014\004\104\006\060\010\065\016\063" +
    "\020\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\107\022\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\010\065\016\024\020\015\021\122\022\120\026" +
    "\117\001\001\000\024\002\255\003\142\004\064\005\135" +
    "\006\060\007\131\010\065\016\063\020\061\001\001\000" +
    "\004\010\217\001\001\000\024\002\205\003\142\004\064" +
    "\005\135\006\060\007\131\010\065\016\063\020\061\001" +
    "\001\000\004\010\123\001\001\000\002\001\001\000\026" +
    "\002\133\003\130\004\064\005\135\006\060\007\131\010" +
    "\132\016\063\020\061\037\126\001\001\000\024\002\143" +
    "\003\204\004\064\005\135\006\060\007\131\010\065\016" +
    "\063\020\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\167\001\001\000\004\007\141\001\001\000\024\002" +
    "\143\003\142\004\064\005\135\006\060\007\131\010\065" +
    "\016\063\020\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\154\007\131\001\001" +
    "\000\002\001\001\000\006\005\153\007\131\001\001\000" +
    "\006\005\152\007\131\001\001\000\006\005\151\007\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\165\005\166\006\060" +
    "\007\131\010\065\016\063\020\061\001\001\000\020\004" +
    "\163\005\164\006\060\007\131\010\065\016\063\020\061" +
    "\001\001\000\014\004\162\006\060\010\065\016\063\020" +
    "\061\001\001\000\014\004\161\006\060\010\065\016\063" +
    "\020\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\172\004\064\006\060\010\065\016\063\020\061\044\175" +
    "\045\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\172\004\064\006\060\010\065\016\063\020\061\044" +
    "\200\045\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\207\027\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\010" +
    "\020\016\024\020\015\021\034\022\037\024\026\025\041" +
    "\026\042\031\047\032\007\033\022\034\044\036\213\040" +
    "\010\041\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\216\004\064\006\060\010\065\016\063\020" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\132\014\224\015\221\016\222\020\226\037\225\001" +
    "\001\000\002\001\001\000\004\017\075\001\001\000\016" +
    "\007\236\011\233\012\237\013\240\014\224\015\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\224\015\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\236\013\244\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\233\012\251\001\001" +
    "\000\006\011\233\012\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\207\027\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\010\020\016\024\020\015\021\034\022\037\024" +
    "\026\025\041\026\042\031\047\032\007\033\022\034\044" +
    "\036\263\040\010\041\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\010\020\016\024\020\015\021\034\022\037\024\026\025" +
    "\041\026\042\031\047\032\007\033\022\034\044\036\270" +
    "\040\010\041\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\207\027\273\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\010\020\016\024\020\015\021" +
    "\034\022\037\024\026\025\041\026\042\031\047\032\007" +
    "\033\022\034\044\036\276\040\010\041\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\010\020\016\024\020" +
    "\015\021\034\022\037\024\026\025\041\026\042\031\047" +
    "\032\007\033\022\034\044\036\304\040\010\041\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\327\001\001\000\004\010\325\001\001\000\004\010\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\u010b\001" +
    "\001\000\004\010\376\001\001\000\002\001\001\000\004" +
    "\010\337\001\001\000\002\001\001\000\012\021\343\022" +
    "\342\042\345\043\341\001\001\000\002\001\001\000\004" +
    "\010\366\001\001\000\004\010\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\343\022\342\042\345" +
    "\043\351\001\001\000\012\021\343\022\342\042\345\043" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\010\020\016\024\020\015\021\034\022\037\024\026\025" +
    "\041\026\042\031\047\032\007\033\022\034\044\036\353" +
    "\040\010\041\045\001\001\000\004\035\355\001\001\000" +
    "\012\006\357\010\065\016\063\020\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\010\020\016\024\020\015\021\034\022" +
    "\037\024\026\025\041\026\042\031\047\032\007\033\022" +
    "\034\044\036\373\040\010\041\045\001\001\000\004\035" +
    "\374\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\343\022\342\042\345\043\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\010\020" +
    "\016\024\020\015\021\034\022\037\024\026\025\041\026" +
    "\042\031\047\032\007\033\022\034\044\036\u0103\040\010" +
    "\041\045\001\001\000\004\035\u0104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\010\020" +
    "\016\024\020\015\021\034\022\037\024\026\025\041\026" +
    "\042\031\047\032\007\033\022\034\044\036\u0108\040\010" +
    "\041\045\001\001\000\004\035\u0109\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\021\343" +
    "\022\342\042\345\043\u010d\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\010\020\016\024\020\015\021\034" +
    "\022\037\024\026\025\041\026\042\031\047\032\007\033" +
    "\022\034\044\036\u0110\040\010\041\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\010" +
    "\020\016\024\020\015\021\034\022\037\024\026\025\041" +
    "\026\042\031\047\032\007\033\022\034\044\036\u0114\040" +
    "\010\041\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u011a\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\u011f\003\u011d\004\064\005\135\006\060\007" +
    "\131\010\132\014\224\015\u011e\016\063\020\061\037\u0120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\010\020\016\024\020\015\021\034\022\037\024\026\025" +
    "\041\026\042\031\047\032\007\033\022\034\044\036\u012a" +
    "\040\010\041\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\010\020" +
    "\016\024\020\015\021\034\022\037\024\026\025\041\026" +
    "\042\031\047\032\007\033\022\034\044\036\u012f\040\010" +
    "\041\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\010\020\016\024\020\015\021\034\022\037\024\026" +
    "\025\041\026\042\031\047\032\007\033\022\034\044\036" +
    "\u0132\040\010\041\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\010\020\016\024\020\015\021\034\022" +
    "\037\024\026\025\041\026\042\031\047\032\007\033\022" +
    "\034\044\036\u0135\040\010\041\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\010\020" +
    "\016\024\020\015\021\034\022\037\024\026\025\041\026" +
    "\042\031\047\032\007\033\022\034\044\036\u0139\040\010" +
    "\041\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\172\004\064\006\060\010\065\016\063\020\061" +
    "\044\u0140\045\174\001\001\000\022\003\172\004\064\006" +
    "\060\010\065\016\063\020\061\044\u013d\045\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\010\020\016\024\020\015\021\034\022" +
    "\037\024\026\025\041\026\042\031\047\032\007\033\022" +
    "\034\044\036\u0145\040\010\041\045\046\014\047\u0146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\010\020\016\024\020\015\021\034\022\037\024" +
    "\026\025\041\026\042\031\047\032\007\033\022\034\044" +
    "\036\u0149\040\010\041\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\002\u0151\003\u0150\004\064\005\135\006" +
    "\060\007\131\010\065\014\224\015\u014f\016\063\020\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\010\020\016\024\020\015\021\034\022\037\024\026" +
    "\025\041\026\042\031\047\032\007\033\022\034\044\036" +
    "\u0159\040\010\041\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\010\020\016\024\020\015\021\034\022" +
    "\037\024\026\025\041\026\042\031\047\032\007\033\022" +
    "\034\044\036\u015c\040\010\041\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\010\020" +
    "\016\024\020\015\021\034\022\037\024\026\025\041\026" +
    "\042\031\047\032\007\033\022\034\044\036\u0161\040\010" +
    "\041\045\046\014\047\u0162\050\027\051\u0160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\010\020\016\024\020\015\021\034\022" +
    "\037\024\026\025\041\026\042\031\047\032\007\033\022" +
    "\034\044\036\u0165\040\010\041\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\010\020\016" +
    "\024\020\015\021\034\022\037\024\026\025\041\026\042" +
    "\031\047\032\007\033\022\034\044\036\u016c\040\010\041" +
    "\045\046\014\047\u016d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\010\020\016\024\020" +
    "\015\021\034\022\037\024\026\025\041\026\042\031\047" +
    "\032\007\033\022\034\044\036\u0170\040\010\041\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\021\u017a\022\u0179\024\026\025\u0178" +
    "\030\u017b\001\001\000\014\021\u017a\022\u0179\024\026\025" +
    "\u0178\030\u017f\001\001\000\004\010\u017e\001\001\000\004" +
    "\010\u017d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\u017a\022\u0179\024\026\025\u0178\030\u0181\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTTiny$actions {
  private final ConstructorASTTiny parser;

  /** Constructor */
  CUP$ConstructorASTTiny$actions(ConstructorASTTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action_part00000000(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTTiny$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Ini ::= LAP LAP BLOQ_TDEF LCI LAP BLOQ_ST LCI LAP BLOQ_D LCI LAP BLOQ_I LCI LCI 
            {
              INI RESULT =null;
		TDEF bloq1 = (TDEF)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-11)).value;
		STRUCT bloq2 = (STRUCT)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-8)).value;
		D bloq3 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq4 = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		 RESULT=new Inicio(bloq1,bloq2,bloq3,bloq4); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Ini",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Ini EOF 
            {
              Object RESULT =null;
		INI start_val = (INI)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTTiny$parser.done_parsing();
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Ini ::= LAP LAP BLOQ_ST LCI LAP BLOQ_D LCI LAP BLOQ_I LCI LCI 
            {
              INI RESULT =null;
		STRUCT bloq2 = (STRUCT)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-8)).value;
		D bloq3 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq4 = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		 RESULT=new Inicio(bloq2,bloq3,bloq4); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Ini",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Ini ::= LAP LAP BLOQ_D LCI LAP BLOQ_I LCI LCI 
            {
              INI RESULT =null;
		D bloq3 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq4 = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		 RESULT=new Inicio(bloq3,bloq4); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Ini",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Ini ::= LAP LAP BLOQ_I LCI LCI 
            {
              INI RESULT =null;
		I bloq4 = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		 RESULT=new Inicio(bloq4); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Ini",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Ini ::= LAP LAP BLOQ_TDEF LCI LAP BLOQ_ST LCI LAP BLOQ_I LCI LCI 
            {
              INI RESULT =null;
		TDEF bloq1 = (TDEF)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-8)).value;
		STRUCT bloq2 = (STRUCT)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq4 = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		 RESULT=new Inicio(bloq1,bloq2,bloq4); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Ini",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Ini ::= LAP LAP BLOQ_TDEF LCI LAP BLOQ_D LCI LAP BLOQ_I LCI LCI 
            {
              INI RESULT =null;
		TDEF bloq1 = (TDEF)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-8)).value;
		D bloq3 = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq4 = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		 RESULT=new Inicio(bloq1,bloq3,bloq4); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Ini",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Ini ::= LAP LAP BLOQ_ST LCI LAP BLOQ_I LCI LCI 
            {
              INI RESULT =null;
		STRUCT bloq2 = (STRUCT)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq4 = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		 RESULT=new Inicio(bloq2,bloq4); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Ini",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Ini ::= LAP LAP BLOQ_TDEF LCI LAP BLOQ_I LCI LCI 
            {
              INI RESULT =null;
		TDEF bloq1 = (TDEF)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq4 = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		 RESULT=new Inicio(bloq1,bloq4); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Ini",42, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp ::= Exp MAS Term 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.SUMA,aDeexp1,aDeterm); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Exp",1, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp ::= Exp MENOS Term 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.RES,aDeexp1,aDeterm); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Exp",1, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp ::= Term 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Exp",1, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Term ::= Term POR Fact 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.MUL,aDeterm1,aDefact); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Term",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Term ::= Term DIV Fact 
            {
              E RESULT =null;
		E aDeterm1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.DIV,aDeterm1,aDefact); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Term",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Term ::= Fact 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Term",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Fact ::= ENT 
            {
              E RESULT =null;
		TokenValue numValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Num(numValue.lexema); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Fact ::= Fact_st 
            {
              E RESULT =null;
		E st = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = st; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Fact ::= PAP Exp PCIERRE 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Fact ::= Fact_elem_l 
            {
              E RESULT =null;
		E st = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = st; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expb ::= Exp IGUALCOMP Term 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.IGUALCOMP,aDeexp1,aDeexp2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Expb",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expb ::= Exp MAYOR Term 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.MAYOR,aDeexp1,aDeexp2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Expb",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expb ::= Exp MENOR Term 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.MENOR,aDeexp1,aDeexp2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Expb",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expb ::= Exp DIST Term 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.DIST,aDeexp1,aDeexp2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Expb",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expb ::= Exp IGUALCOMP Termb 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.IGUALCOMP,aDeexp1,aDeexp2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Expb",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expb ::= Exp DIST Termb 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.DIST,aDeexp1,aDeexp2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Expb",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expb ::= Expb IGUALCOMP Termb 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.IGUALCOMP,aDeexp1,aDeexp2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Expb",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expb ::= Expb MAYOR Termb 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.MAYOR,aDeexp1,aDeexp2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Expb",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expb ::= Expb MENOR Termb 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.MENOR,aDeexp1,aDeexp2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Expb",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expb ::= Expb DIST Termb 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.DIST,aDeexp1,aDeexp2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Expb",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expb ::= Termb 
            {
              E RESULT =null;
		E aDeterm = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT=aDeterm; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Expb",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Termb ::= Termb AND Factb 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.AND,aDeexp1,aDeexp2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Termb",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Termb ::= Termb OR Factb 
            {
              E RESULT =null;
		E aDeexp1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp2 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new EBin(KindE.OR,aDeexp1,aDeexp2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Termb",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Termb ::= Factb 
            {
              E RESULT =null;
		E aDefact = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT=aDefact; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Termb",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Factb ::= T 
            {
              E RESULT =null;
		TokenValue tt = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new Bool(tt.lexema); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Factb",5, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Factb ::= F 
            {
              E RESULT =null;
		TokenValue ff = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new Bool(ff.lexema); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Factb",5, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Factb ::= PAP Expb PCIERRE 
            {
              E RESULT =null;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = aDeexp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Factb",5, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Fact_st ::= Fact_id 
            {
              E RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = id; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_st",12, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Fact_st ::= Fact_id PUNTO Fact_st 
            {
              E RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E st = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new EBin(KindE.PUNTO,id,st); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_st",12, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Lista_pos ::= CORAP Exp CORCI 
            {
              E RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = e; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Lista_pos",13, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Lista_pos ::= CORAP error CORCI 
            {
              E RESULT =null;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Lista_pos",13, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Fact_elem_l ::= Fact_elem_l Lista_pos 
            {
              E RESULT =null;
		E acc1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		E l = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new EBin(KindE.ACCESO,acc1,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_elem_l",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Fact_elem_l ::= Fact_st Lista_pos 
            {
              E RESULT =null;
		E acc1 = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		E l = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new EBin(KindE.ACCESO,acc1,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_elem_l",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ENUM_NUM ::= Fact_num COMA ENUM_NUM 
            {
              E RESULT =null;
		E n = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E l = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new Lista(n,l,new Tipo("int")); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ENUM_NUM",8, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ENUM_NUM ::= Fact_num error ENUM_NUM 
            {
              E RESULT =null;
		E n = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E l = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ENUM_NUM",8, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ENUM_NUM ::= Fact_num 
            {
              E RESULT =null;
		E n = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new Lista(n,new Tipo("int")); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ENUM_NUM",8, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ENUM_B ::= Factb COMA ENUM_B 
            {
              E RESULT =null;
		E n = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E l = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new Lista(n,l,new Tipo("bool")); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ENUM_B",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ENUM_B ::= Factb 
            {
              E RESULT =null;
		E n = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new Lista(n,new Tipo("bool")); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ENUM_B",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LISTA ::= CORAP ENUM_NUM CORCI 
            {
              E RESULT =null;
		TokenValue c1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E l = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		TokenValue c2 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Lista(l,c1.lexema,c2.lexema,new Tipo("array")); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("LISTA",10, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LISTA ::= CORAP ENUM_B CORCI 
            {
              E RESULT =null;
		TokenValue c1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E l = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		TokenValue c2 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Lista(l,c1.lexema,c2.lexema,new Tipo("array")); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("LISTA",10, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LISTA ::= CORAP ENUM_LISTA CORCI 
            {
              E RESULT =null;
		TokenValue c1 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E l = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		TokenValue c2 = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Lista(l,c1.lexema,c2.lexema,new Tipo("array")); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("LISTA",10, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ENUM_LISTA ::= LISTA COMA ENUM_LISTA 
            {
              E RESULT =null;
		E n = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E l = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new Lista(n,l,new Tipo("array")); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ENUM_LISTA",11, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ENUM_LISTA ::= LISTA 
            {
              E RESULT =null;
		E n = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new Lista(n,new Tipo("array")); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ENUM_LISTA",11, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Fact_id ::= IDEN 
            {
              E RESULT =null;
		TokenValue Value = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Id(Value.lexema); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_id",6, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Fact_num ::= ENT 
            {
              E RESULT =null;
		TokenValue numValue = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Num(numValue.lexema); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_num",7, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Asig ::= Fact_st IGUAL Exp PUNTOCOMA 
            {
              I RESULT =null;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(IdValue,aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Asig_for ::= Fact_id IGUAL Exp 
            {
              I RESULT =null;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new Asig(IdValue,aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig_for",21, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Asig ::= Fact_elem_l IGUAL Exp PUNTOCOMA 
            {
              I RESULT =null;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(IdValue,aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Asig ::= Fact_st IGUAL Expb PUNTOCOMA 
            {
              I RESULT =null;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(IdValue,aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Asig ::= Fact_elem_l IGUAL Expb PUNTOCOMA 
            {
              I RESULT =null;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(IdValue,aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Asig ::= Fact_tipo Fact_id IGUAL Exp PUNTOCOMA 
            {
              I RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(new Def(tipo,IdValue),aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Asig ::= Fact_tipo Fact_id IGUAL Expb PUNTOCOMA 
            {
              I RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(new Def(tipo,IdValue),aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Asig ::= Fact_tipo_array Fact_id IGUAL ENUM_LISTA PUNTOCOMA 
            {
              I RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(new Def(tipo,IdValue),new Lista(aDeexp,tipo)); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Asig ::= Fact_tipo_array Fact_id IGUAL Fact_st PUNTOCOMA 
            {
              I RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(new Def(tipo,IdValue),aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Asig ::= Fact_tipo_array Fact_id IGUAL Fact_elem_l PUNTOCOMA 
            {
              I RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(new Def(tipo,IdValue),aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Asig ::= Fact_st IGUAL ENUM_LISTA PUNTOCOMA 
            {
              I RESULT =null;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(IdValue,aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Asig ::= Fact_elem_l IGUAL ENUM_LISTA PUNTOCOMA 
            {
              I RESULT =null;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		E aDeexp = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(IdValue,aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Asig ::= Fact_st IGUAL CALL_F PUNTOCOMA 
            {
              I RESULT =null;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		I aDeexp = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(IdValue,aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Asig ::= Fact_tipo Fact_id IGUAL CALL_F PUNTOCOMA 
            {
              I RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		I aDeexp = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(new Def(tipo,IdValue),aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Asig ::= Fact_tipo_array Fact_id IGUAL CALL_F PUNTOCOMA 
            {
              I RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		E IdValue = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		I aDeexp = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Asig(new Def(tipo,IdValue),aDeexp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Asig",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Def ::= Fact_tipo Fact_id 
            {
              I RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new Def(t,id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Def",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Def ::= Fact_tipo Fact_id PUNTOCOMA 
            {
              I RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Def(t,id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Def",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Def ::= Fact_tipo_array Fact_id 
            {
              I RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new Def(t,id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Def",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Def ::= Fact_tipo_array Fact_id PUNTOCOMA 
            {
              I RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Def(t,id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Def",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Def ::= Fact_tipo_ptr Fact_id IGUAL NEW Fact_tipo PUNTOCOMA 
            {
              I RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		T t2 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT= new Def(t,id,t2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Def",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Def ::= Fact_tipo_ptr Fact_id IGUAL NEW Fact_tipo 
            {
              I RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		T t2 = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT= new Def(t,id,t2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Def",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LISTA_DEF ::= Def LISTA_DEF 
            {
              I RESULT =null;
		I t = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		I l = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Def(t,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("LISTA_DEF",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LISTA_DEF ::= Def 
            {
              I RESULT =null;
		I t = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = t; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("LISTA_DEF",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Fact_tipo ::= INT_0 
            {
              T RESULT =null;
		TokenValue tipo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Tipo(tipo.lexema); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_tipo",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Fact_tipo ::= B 
            {
              T RESULT =null;
		TokenValue tipo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Tipo(tipo.lexema); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_tipo",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Fact_tipo ::= IDEN 
            {
              T RESULT =null;
		TokenValue tipo = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Tipo(tipo.lexema); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_tipo",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Fact_tipo_array ::= ARRAY Fact_tipo 
            {
              T RESULT =null;
		TokenValue array = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Tipo(array.lexema,tipo); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_tipo_array",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Fact_tipo_array ::= ARRAY Fact_tipo_array 
            {
              T RESULT =null;
		TokenValue array = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Tipo(array.lexema,tipo); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_tipo_array",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Fact_tipo_array ::= ARRAY PAP Exp PCIERRE Fact_tipo 
            {
              T RESULT =null;
		TokenValue array = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Tipo(array.lexema,tipo,e); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_tipo_array",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Fact_tipo_array ::= ARRAY PAP Exp PCIERRE Fact_tipo_array 
            {
              T RESULT =null;
		TokenValue array = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Tipo(array.lexema,tipo,e); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_tipo_array",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Fact_tipo_ptr ::= POR Fact_tipo 
            {
              T RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = t; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Fact_tipo_ptr",18, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TYDEF ::= TYPEDEF Fact_tipo Fact_id PUNTOCOMA 
            {
              TDEF RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E value = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Typedef(tipo,value); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("TYDEF",40, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TYDEF ::= TYPEDEF Fact_tipo_array Fact_id PUNTOCOMA 
            {
              TDEF RESULT =null;
		T tipo = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		E value = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Typedef(tipo,value); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("TYDEF",40, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TYDEF ::= TYPEDEF error Fact_id PUNTOCOMA 
            {
              TDEF RESULT =null;
		E value = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("TYDEF",40, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // BLOQ_TDEF ::= TYDEF BLOQ_TDEF 
            {
              TDEF RESULT =null;
		TDEF t = (TDEF)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		TDEF l = (TDEF)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Typedef(t,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_TDEF",41, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // BLOQ_TDEF ::= TYDEF 
            {
              TDEF RESULT =null;
		TDEF t = (TDEF)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = t; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_TDEF",41, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ST ::= STRUCT Fact_id LAP LISTA_DEF LCI 
            {
              STRUCT RESULT =null;
		E iden = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		I l = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Struct0(l,iden); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ST",38, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ST ::= STRUCT error LAP LISTA_DEF LCI 
            {
              STRUCT RESULT =null;
		I l = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ST",38, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // BLOQ_ST ::= ST BLOQ_ST 
            {
              STRUCT RESULT =null;
		STRUCT st = (STRUCT)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		STRUCT l = (STRUCT)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Struct0(st,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_ST",39, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BLOQ_ST ::= ST 
            {
              STRUCT RESULT =null;
		STRUCT st = (STRUCT)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = st; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_ST",39, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ESC ::= PRINT Fact_id PUNTOCOMA 
            {
              I RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Esc(id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ESC",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ESC ::= PRINT error PUNTOCOMA 
            {
              I RESULT =null;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("ESC",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LEC ::= READ Fact_id PUNTOCOMA 
            {
              I RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Lec(id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("LEC",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LEC ::= READ error PUNTOCOMA 
            {
              I RESULT =null;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("LEC",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IF_I ::= IF Expb LAP BLOQ_I LCI 
            {
              I RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new If(e,bloq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("IF_I",25, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IF_I ::= IF Expb LAP BLOQ_I LCI ELSE LAP BLOQ_I LCI 
            {
              I RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-7)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq2 = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new If(e,bloq,bloq2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("IF_I",25, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IF_I ::= IF Expb LAP BLOQ_I LCI error LAP BLOQ_I LCI 
            {
              I RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-7)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq2 = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("IF_I",25, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IF_I ::= IF error LAP BLOQ_I LCI ELSE LAP BLOQ_I LCI 
            {
              I RESULT =null;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq2 = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("IF_I",25, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // WHILE_I ::= WHILE Expb LAP BLOQ_I LCI 
            {
              I RESULT =null;
		E e = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new While(e,bloq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("WHILE_I",26, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // WHILE_I ::= WHILE error LAP BLOQ_I LCI 
            {
              I RESULT =null;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("WHILE_I",26, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // FOR_I ::= FOR PAP Asig Expb PUNTOCOMA Asig_for PCIERRE LAP BLOQ_I LCI 
            {
              I RESULT =null;
		I asig = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-7)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-6)).value;
		I it = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new For(asig,cond,it,bloq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("FOR_I",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // FOR_I ::= FOR PAP error Expb PUNTOCOMA Asig_for PCIERRE LAP BLOQ_I LCI 
            {
              I RESULT =null;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-6)).value;
		I it = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("FOR_I",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // FOR_I ::= FOR PAP Asig error PUNTOCOMA Asig_for PCIERRE LAP BLOQ_I LCI 
            {
              I RESULT =null;
		I asig = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-7)).value;
		I it = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("FOR_I",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // FOR_I ::= FOR PAP Asig Expb PUNTOCOMA error LAP BLOQ_I LCI 
            {
              I RESULT =null;
		I asig = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-6)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("FOR_I",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FOR_I ::= FOR PAP Asig Expb PUNTOCOMA Asig_for PCIERRE LAP error LCI 
            {
              I RESULT =null;
		I asig = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-7)).value;
		E cond = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-6)).value;
		I it = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("FOR_I",30, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // RET_I ::= RET Fact PUNTOCOMA 
            {
              I RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Ret(id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("RET_I",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // RET_I ::= RET error PUNTOCOMA 
            {
              I RESULT =null;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("RET_I",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // CALL_F ::= Fact_id PAP PCIERRE PUNTOCOMA 
            {
              I RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		 RESULT = new Call_Fun(id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("CALL_F",29, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // CALL_F ::= Fact_id PAP LISTA_PARAM_CALL PCIERRE 
            {
              I RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		P p = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Call_Fun(id,p); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("CALL_F",29, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CALL_FVOID ::= Fact_id PAP LISTA_PARAM_CALL PCIERRE PUNTOCOMA 
            {
              I RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		P p = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		 RESULT = new Call_Fun(id,p); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("CALL_FVOID",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CALL_FVOID ::= Fact_id error LISTA_PARAM_CALL PCIERRE PUNTOCOMA 
            {
              I RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		P p = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("CALL_FVOID",31, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // BLOQ_I ::= Def BLOQ_I 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		I l = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // BLOQ_I ::= Asig BLOQ_I 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		I l = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // BLOQ_I ::= LEC BLOQ_I 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		I l = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // BLOQ_I ::= ESC BLOQ_I 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		I l = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // BLOQ_I ::= IF_I BLOQ_I 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		I l = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // BLOQ_I ::= WHILE_I BLOQ_I 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		I l = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // BLOQ_I ::= CALL_FVOID BLOQ_I 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		I l = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // BLOQ_I ::= FOR_I BLOQ_I 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		I l = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // BLOQ_I ::= Def 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // BLOQ_I ::= Asig 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // BLOQ_I ::= LEC 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // BLOQ_I ::= ESC 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // BLOQ_I ::= IF_I 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // BLOQ_I ::= WHILE_I 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // BLOQ_I ::= CALL_FVOID 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // BLOQ_I ::= FOR_I 
            {
              I RESULT =null;
		I i = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_I(i); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_I",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Void ::= VOID 
            {
              T RESULT =null;
		TokenValue t = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Tipo(t.lexema); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("Void",17, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DEF_FUN ::= DEF Fact_tipo Fact_id PAP PCIERRE LAP BLOQ_I RET_I LCI 
            {
              D RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-7)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-6)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		I ret = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Def_Fun(t,id,bloq,ret); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("DEF_FUN",36, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DEF_FUN ::= DEF Fact_tipo_array Fact_id PAP PCIERRE LAP BLOQ_I RET_I LCI 
            {
              D RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-7)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-6)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		I ret = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Def_Fun(t,id,bloq,ret); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("DEF_FUN",36, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DEF_FUN ::= DEF Void Fact_id PAP PCIERRE LAP BLOQ_I LCI 
            {
              D RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-6)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Def_Fun(t,id,bloq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("DEF_FUN",36, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DEF_FUN ::= DEF Fact_tipo Fact_id PAP LISTA_PARAM PCIERRE LAP BLOQ_I RET_I LCI 
            {
              D RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-8)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-7)).value;
		P p = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		I ret = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Def_Fun(t,id,bloq,p,ret); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("DEF_FUN",36, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DEF_FUN ::= DEF Fact_tipo_array Fact_id PAP LISTA_PARAM PCIERRE LAP BLOQ_I RET_I LCI 
            {
              D RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-8)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-7)).value;
		P p = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-5)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		I ret = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Def_Fun(t,id,bloq,p,ret); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("DEF_FUN",36, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DEF_FUN ::= DEF Void Fact_id PAP LISTA_PARAM PCIERRE LAP BLOQ_I LCI 
            {
              D RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-7)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-6)).value;
		P p = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		I bloq = (I)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = new Def_Fun(t,id,bloq,p); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("DEF_FUN",36, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LISTA_PARAM ::= PARAM COMA LISTA_PARAM 
            {
              P RESULT =null;
		P p = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		P l = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Param(p,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("LISTA_PARAM",33, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LISTA_PARAM ::= PARAM error LISTA_PARAM 
            {
              P RESULT =null;
		P p = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		P l = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;

              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("LISTA_PARAM",33, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LISTA_PARAM ::= PARAM 
            {
              P RESULT =null;
		P p = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = p; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("LISTA_PARAM",33, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PARAM ::= Fact_tipo Fact_id 
            {
              P RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Param(t,id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("PARAM",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PARAM ::= Fact_tipo ASP Fact_id 
            {
              P RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Param(t,a.lexema,id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("PARAM",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PARAM ::= Fact_tipo_array Fact_id 
            {
              P RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Param(t,id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("PARAM",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PARAM ::= Fact_tipo_array ASP Fact_id 
            {
              P RESULT =null;
		T t = (T)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		TokenValue a = (TokenValue)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Param(t,a.lexema,id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("PARAM",32, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LISTA_PARAM_CALL ::= PARAM_CALL COMA LISTA_PARAM_CALL 
            {
              P RESULT =null;
		P p = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		P l = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Param(p,l); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("LISTA_PARAM_CALL",34, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // LISTA_PARAM_CALL ::= PARAM_CALL 
            {
              P RESULT =null;
		P p = (P)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = p; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("LISTA_PARAM_CALL",34, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PARAM_CALL ::= Exp 
            {
              P RESULT =null;
		E id = (E)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Param(id); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("PARAM_CALL",35, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // BLOQ_D ::= DEF_FUN BLOQ_D 
            {
              D RESULT =null;
		D f = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		D bloq = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_D(f,bloq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_D",37, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // BLOQ_D ::= DEF_FUN 
            {
              D RESULT =null;
		D f = (D)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = new Bloq_D(f); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("BLOQ_D",37, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTTiny$do_action_part00000000(
                               CUP$ConstructorASTTiny$act_num,
                               CUP$ConstructorASTTiny$parser,
                               CUP$ConstructorASTTiny$stack,
                               CUP$ConstructorASTTiny$top);
    }
}

