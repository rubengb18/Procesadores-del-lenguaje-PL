package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: return getScanner().next_token(); :};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal     IDEN, ENT, MAS,
             MENOS, POR, DIV, IGUAL, COMA, PAP, PCIERRE,CORAP,CORCI,
             MAYOR,MENOR,IGUALCOMP,DIST,IF,WHILE,PUNTOCOMA,LCI,LAP,B,T,F, INT_0, ARRAY,
             AND,OR,ELSE,DEF,VOID,RET,PRINT,READ,ASP,STRUCT,TYPEDEF,NEW,FOR,PUNTO;

non terminal  S, E0, E1, E2, OP0, OP1,INS,LISTA_INS,BLOQ_0,BLOQ_1,TIPO, DEF_0,ASIG_0,ASIG_1,ASIG_2,WHILE_I,IF_I,OP0_B,OP1_B,OP2_B,
			  BOOL,ENUM,ENUM_B,ENUM_LISTA,LISTA,PARAM,PARAM_ENUM,PARAMETROS,FUNCION,RETURN, BLOQ_F,BLOQ_STR,DEV,
			  ELEM_AR,IDENS,LEC,ESC,STR,LISTA_DEF,LISTA_STR,TDEF,LISTA_TDEF, BLOQ_INS,BLOQ_TDEF,BLOQ_LISTA_STR,CALL_F,
			  CALL_LISTA_PARAM,CALL_PARAM,POS,DEF_PTR,TIPO_PTR,TIPO_B,FOR_I,IT,LISTA_DEF_FUN,BLOQ_LISTA_DEF_FUN,CALL_FVOID,TIPO_ARRAY,DEF_ARRAY,
			  ASIG_ARRAY;

//Inicio y Bloques
	
	S   ::= BLOQ_0 ;
	BLOQ_0 ::= LAP BLOQ_1 LCI;
	BLOQ_1 ::= BLOQ_LISTA_STR BLOQ_INS |BLOQ_TDEF BLOQ_LISTA_STR BLOQ_INS|BLOQ_TDEF  BLOQ_INS| BLOQ_INS |BLOQ_LISTA_STR BLOQ_LISTA_DEF_FUN BLOQ_INS |BLOQ_TDEF BLOQ_LISTA_STR BLOQ_LISTA_DEF_FUN BLOQ_INS|BLOQ_TDEF BLOQ_LISTA_DEF_FUN BLOQ_INS|BLOQ_LISTA_DEF_FUN BLOQ_INS;
	BLOQ_INS ::= LAP LISTA_INS LCI  | LAP LCI;
	BLOQ_F ::= LAP LISTA_INS RETURN LCI;
	BLOQ_STR ::= LAP LISTA_DEF LCI;
	BLOQ_TDEF ::= LAP LISTA_TDEF LCI;
	BLOQ_LISTA_STR ::= LAP LISTA_STR LCI;
	BLOQ_LISTA_DEF_FUN ::= LAP LISTA_DEF_FUN LCI;

//Sucesion de instrucciones para los distintos bloques
	
	LISTA_DEF ::= DEF_0 LISTA_DEF| DEF_ARRAY LISTA_DEF | DEF_0 |DEF_ARRAY;
	LISTA_STR ::=STR LISTA_STR | STR ;
	LISTA_TDEF ::= TDEF LISTA_TDEF | TDEF;
	LISTA_INS ::= INS LISTA_INS | INS ;
	LISTA_DEF_FUN ::= FUNCION LISTA_DEF_FUN | FUNCION ;

//Tipos

	TIPO ::=TIPO_PTR|TIPO_B ;
	TIPO_B ::= INT_0 | B |IDEN;
	TIPO_ARRAY ::= ARRAY TIPO_B | ARRAY TIPO_ARRAY | ARRAY PAP ENT PCIERRE TIPO_B | ARRAY PAP ENT PCIERRE TIPO_ARRAY |ARRAY error IDEN  | ARRAY error TIPO_ARRAY;
	TIPO_PTR::=POR TIPO_B ;

//Instrucciones

	INS ::= ASIG_0 | ASIG_2| ASIG_ARRAY| DEF_0|DEF_ARRAY |DEF_PTR| IF_I | WHILE_I|FOR_I|CALL_FVOID  | ESC | LEC ;
	DEF_0 ::= TIPO_B IDEN PUNTOCOMA;
	DEF_ARRAY ::= TIPO_ARRAY IDEN PUNTOCOMA;
	DEF_PTR ::=TIPO_PTR IDEN IGUAL NEW TIPO PUNTOCOMA;
	ASIG_0 ::= IDENS IGUAL ASIG_1 PUNTOCOMA;
	ASIG_1 ::= E0 |ENUM_LISTA |CALL_F;
	ASIG_2 ::=TIPO_B IDEN IGUAL ASIG_1 PUNTOCOMA;
	ASIG_ARRAY ::=  TIPO_ARRAY IDEN IGUAL ASIG_1 PUNTOCOMA;
	IDENS ::= IDEN | ELEM_AR | IDEN PUNTO IDENS;
	IF_I ::= IF E0 BLOQ_INS | IF E0 BLOQ_INS ELSE BLOQ_INS;
	WHILE_I ::= WHILE E0 BLOQ_INS;
	FOR_I::= FOR PAP ASIG_2 E0 PUNTOCOMA IT PCIERRE BLOQ_INS | FOR PAP error;
	IT::= IDEN IGUAL IDEN OP0 ENT | IDEN IGUAL error;
	LEC ::= READ IDEN PUNTOCOMA;
	ESC ::= PRINT IDEN PUNTOCOMA;

//Expresiones binarias

	E0  ::= E0 OP0 E1  | E1 ;
	E1  ::= E1 OP1 E2  | E2 ;
	E2  ::= ENT | IDENS| BOOL | PAP E0 PCIERRE ; 
	OP0 ::= MAS  | MENOS |OP2_B;
	OP1 ::= POR | DIV |OP0_B|OP1_B;
	OP0_B ::= MAYOR  | MENOR;
	OP1_B ::= IGUALCOMP | DIST;
	OP2_B ::= AND | OR;
	
//Listas y acceso a ellas

	BOOL ::= T | F ;
	ENUM ::= ENT COMA ENUM | ENT ;
	ENUM_B ::= BOOL COMA ENUM_B | BOOL ;
	LISTA ::= CORAP ENUM CORCI |CORAP ENUM error | CORAP ENUM_B CORCI  | CORAP ENUM_B error| CORAP ENUM_LISTA CORCI| CORAP ENUM_LISTA error  |CORAP CORCI |error;
	ENUM_LISTA ::= LISTA COMA ENUM_LISTA | LISTA ;
	ELEM_AR ::= IDEN POS;
	POS::=CORAP ENT CORCI POS | CORAP ENT CORCI |CORAP IDENS CORCI POS | CORAP IDENS CORCI|error;

//Definicion y llamadas a funciones

	PARAM ::= TIPO IDEN|TIPO error IDEN | TIPO ASP IDEN| TIPO ASP error|TIPO_ARRAY IDEN|TIPO_ARRAY error IDEN| TIPO_ARRAY ASP IDEN | TIPO_ARRAY ASP error |error;
	PARAM_ENUM ::= PARAM COMA PARAM_ENUM | PARAM ;
	PARAMETROS ::= PAP PARAM_ENUM PCIERRE | PAP PCIERRE |error PARAM_ENUM error;
	FUNCION ::= DEF VOID IDEN PARAMETROS BLOQ_INS | DEF TIPO IDEN PARAMETROS BLOQ_F | DEF TIPO_ARRAY IDEN PARAMETROS BLOQ_F|error; 
	DEV ::= IDENS | BOOL | ENT | LISTA;
	RETURN ::= RET DEV PUNTOCOMA;
	CALL_F::= IDEN PAP CALL_LISTA_PARAM PCIERRE |IDEN PAP PCIERRE;
	CALL_FVOID ::= CALL_F PUNTOCOMA;
	CALL_LISTA_PARAM::= CALL_PARAM COMA CALL_LISTA_PARAM |CALL_PARAM;
	CALL_PARAM::=IDENS | ENT | BOOL | LISTA;


//Struct
	STR ::= STRUCT IDEN BLOQ_STR | STRUCT error;
//Typedef
	TDEF ::= TYPEDEF TIPO IDEN PUNTOCOMA | TYPEDEF TIPO_ARRAY IDEN PUNTOCOMA;
